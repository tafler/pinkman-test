/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./assets/js/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/index.js":
/*!****************************!*\
  !*** ./assets/js/index.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _imask = __webpack_require__(/*! imask */ \"./node_modules/imask/dist/imask.js\");\n\nvar _imask2 = _interopRequireDefault(_imask);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nwindow.onload = function () {\n  setTimeout(function () {\n    document.querySelector('.pre-loader').classList.add('hidden');\n  }, 1000);\n\n  var beerAnswer = document.querySelector('.beer-answer');\n  var inputName = document.getElementById('input-name');\n  var form = document.getElementById('beer-form');\n  var inputPhone = document.getElementById('input-phone');\n  var inputEmail = document.getElementById('input-email');\n  var btn = document.getElementById('btn-submit');\n  var done = false;\n  var answers = {\n    strength: 'НАСТОЯЩИЙ СОЛОД ДЛЯ ШОТЛАНДСКОГО СТАУТА ПРОХОДИТ ТРИ СТАДИИ ОБРАБОТКИ, ПОСЛЕ КОТОРЫХ ВКУСОВЫЕ КАЧЕСТВА НАПИТКА ПОЛУЧАЮТСЯ СОВЕРШЕННО БЕСПОДОБНЫМИ!',\n    taste: 'текст про крутые ингридиенты НАСТОЯЩИЙ СОЛОД ДЛЯ ШОТЛАНДСКОГО СТАУТА ПРОХОДИТ ТРИ СТАДИИ ОБРАБОТКИ, ПОСЛЕ КОТОРЫХ ВКУСОВЫЕ КАЧЕСТВА НАПИТКА ПОЛУЧАЮТСЯ СОВЕРШЕННО БЕСПОДОБНЫМИ!',\n    color: 'Цвет от чёрного как сажа до тёмно-коричневого с гранатовым отливом. ... Характерна плотная, кремовидная, стойкая пена, цвет от жёлто-коричневого до коричневого. Сухой стаут представлен маркой Guinness Extra Stout.',\n    ingrs: 'В некоторые сорта пива добавляется так называемый «несоложеный продукт». Чаще всего это ячмень, рис или кукуруза. Добавление несоложеного продукта - это один из механизмов создания разных сортов пива, т.к. такая добавка влияет на органолептические свойства пива (вкус, цвет, запах). В некоторые добавляются ещё более экзотичные составляющие. Например, при производстве Hoegaarden (\"Хугарден\") используют апельсиновую цедру и кориандр. А при изготовлении знаменитого бельгийского пива Kriek («Крик») используют натуральные ягоды – вишню, малину, мускатный виноград.',\n    age: 'Несмотря на то, что выдержка в бутылке всего год, уже заметны благородные оттенки дубленой кожи, присущие выдержанным стаутам.'\n  };\n  form = Array.from(form.elements);\n  form.forEach(function (inp) {\n    inp.addEventListener('change', function (e) {\n      beerAnswer.innerHTML = answers[e.target.value];\n    });\n  });\n  var phoneMask = new _imask2.default(inputPhone, {\n    mask: '+{7}(000)000-00-00'\n  });\n  inputPhone.addEventListener('input', function (e) {\n    checkBtn();\n  });\n  inputName.addEventListener('input', function (e) {\n    if (e.target.value.match(/\\d+/)) {\n      e.target.parentNode.classList.add('input-block_bad');\n      checkBtn();\n    } else {\n      e.target.parentNode.classList.remove('input-block_bad');\n      checkBtn();\n    }\n  });\n  inputEmail.addEventListener('input', function (e) {\n    if (!e.target.value.match(/^[-._a-z0-9]+@(?:[a-z0-9][-a-z0-9]+\\.)+[a-z]{2,6}$/)) {\n      e.target.parentNode.classList.add('input-block_bad');\n      checkBtn();\n    } else {\n      e.target.parentNode.classList.remove('input-block_bad');\n      checkBtn();\n    }\n  });\n\n  var checkBtn = function checkBtn() {\n    if (inputName.value !== '' && !inputName.value.match(/\\d+/) && inputEmail.value !== '' && inputEmail.value.match(/^[-._a-z0-9]+@(?:[a-z0-9][-a-z0-9]+\\.)+[a-z]{2,6}$/) && inputPhone.value !== '' && inputPhone.value.length === 16) {\n      btn.classList.remove('my-btn_disabled');\n      done = true;\n    } else {\n      done = false;\n      btn.classList.add('my-btn_disabled');\n    }\n  };\n  btn.addEventListener('click', function (e) {\n    if (done) {\n      console.log(JSON.stringify({ inputName: inputName.value, inputPhone: inputPhone.value, inputEmail: inputEmail.value }));\n    }\n  });\n};\n\n//# sourceURL=webpack:///./assets/js/index.js?");

/***/ }),

/***/ "./node_modules/imask/dist/imask.js":
/*!******************************************!*\
  !*** ./node_modules/imask/dist/imask.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function (global, factory) {\n   true ? module.exports = factory() :\n  undefined;\n}(this, (function () { 'use strict';\n\n  // 7.2.1 RequireObjectCoercible(argument)\n  var _defined = function (it) {\n    if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n    return it;\n  };\n\n  // 7.1.13 ToObject(argument)\n\n  var _toObject = function (it) {\n    return Object(_defined(it));\n  };\n\n  var hasOwnProperty = {}.hasOwnProperty;\n  var _has = function (it, key) {\n    return hasOwnProperty.call(it, key);\n  };\n\n  var toString = {}.toString;\n\n  var _cof = function (it) {\n    return toString.call(it).slice(8, -1);\n  };\n\n  // fallback for non-array-like ES3 and non-enumerable old V8 strings\n\n  // eslint-disable-next-line no-prototype-builtins\n  var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n    return _cof(it) == 'String' ? it.split('') : Object(it);\n  };\n\n  // to indexed object, toObject with fallback for non-array-like ES3 strings\n\n\n  var _toIobject = function (it) {\n    return _iobject(_defined(it));\n  };\n\n  // 7.1.4 ToInteger\n  var ceil = Math.ceil;\n  var floor = Math.floor;\n  var _toInteger = function (it) {\n    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n  };\n\n  // 7.1.15 ToLength\n\n  var min = Math.min;\n  var _toLength = function (it) {\n    return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n  };\n\n  var max = Math.max;\n  var min$1 = Math.min;\n  var _toAbsoluteIndex = function (index, length) {\n    index = _toInteger(index);\n    return index < 0 ? max(index + length, 0) : min$1(index, length);\n  };\n\n  // false -> Array#indexOf\n  // true  -> Array#includes\n\n\n\n  var _arrayIncludes = function (IS_INCLUDES) {\n    return function ($this, el, fromIndex) {\n      var O = _toIobject($this);\n      var length = _toLength(O.length);\n      var index = _toAbsoluteIndex(fromIndex, length);\n      var value;\n      // Array#includes uses SameValueZero equality algorithm\n      // eslint-disable-next-line no-self-compare\n      if (IS_INCLUDES && el != el) while (length > index) {\n        value = O[index++];\n        // eslint-disable-next-line no-self-compare\n        if (value != value) return true;\n      // Array#indexOf ignores holes, Array#includes - not\n      } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n        if (O[index] === el) return IS_INCLUDES || index || 0;\n      } return !IS_INCLUDES && -1;\n    };\n  };\n\n  function createCommonjsModule(fn, module) {\n  \treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n  }\n\n  var _global = createCommonjsModule(function (module) {\n  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n  var global = module.exports = typeof window != 'undefined' && window.Math == Math\n    ? window : typeof self != 'undefined' && self.Math == Math ? self\n    // eslint-disable-next-line no-new-func\n    : Function('return this')();\n  if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n  });\n\n  var SHARED = '__core-js_shared__';\n  var store = _global[SHARED] || (_global[SHARED] = {});\n  var _shared = function (key) {\n    return store[key] || (store[key] = {});\n  };\n\n  var id = 0;\n  var px = Math.random();\n  var _uid = function (key) {\n    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n  };\n\n  var shared = _shared('keys');\n\n  var _sharedKey = function (key) {\n    return shared[key] || (shared[key] = _uid(key));\n  };\n\n  var arrayIndexOf = _arrayIncludes(false);\n  var IE_PROTO = _sharedKey('IE_PROTO');\n\n  var _objectKeysInternal = function (object, names) {\n    var O = _toIobject(object);\n    var i = 0;\n    var result = [];\n    var key;\n    for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);\n    // Don't enum bug & hidden keys\n    while (names.length > i) if (_has(O, key = names[i++])) {\n      ~arrayIndexOf(result, key) || result.push(key);\n    }\n    return result;\n  };\n\n  // IE 8- don't enum bug keys\n  var _enumBugKeys = (\n    'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n  ).split(',');\n\n  // 19.1.2.14 / 15.2.3.14 Object.keys(O)\n\n\n\n  var _objectKeys = Object.keys || function keys(O) {\n    return _objectKeysInternal(O, _enumBugKeys);\n  };\n\n  var _core = createCommonjsModule(function (module) {\n  var core = module.exports = { version: '2.5.5' };\n  if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n  });\n  var _core_1 = _core.version;\n\n  var _isObject = function (it) {\n    return typeof it === 'object' ? it !== null : typeof it === 'function';\n  };\n\n  var _anObject = function (it) {\n    if (!_isObject(it)) throw TypeError(it + ' is not an object!');\n    return it;\n  };\n\n  var _fails = function (exec) {\n    try {\n      return !!exec();\n    } catch (e) {\n      return true;\n    }\n  };\n\n  // Thank's IE8 for his funny defineProperty\n  var _descriptors = !_fails(function () {\n    return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n  });\n\n  var document$1 = _global.document;\n  // typeof document.createElement is 'object' in old IE\n  var is = _isObject(document$1) && _isObject(document$1.createElement);\n  var _domCreate = function (it) {\n    return is ? document$1.createElement(it) : {};\n  };\n\n  var _ie8DomDefine = !_descriptors && !_fails(function () {\n    return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;\n  });\n\n  // 7.1.1 ToPrimitive(input [, PreferredType])\n\n  // instead of the ES6 spec version, we didn't implement @@toPrimitive case\n  // and the second argument - flag - preferred type is a string\n  var _toPrimitive = function (it, S) {\n    if (!_isObject(it)) return it;\n    var fn, val;\n    if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;\n    if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;\n    if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;\n    throw TypeError(\"Can't convert object to primitive value\");\n  };\n\n  var dP = Object.defineProperty;\n\n  var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n    _anObject(O);\n    P = _toPrimitive(P, true);\n    _anObject(Attributes);\n    if (_ie8DomDefine) try {\n      return dP(O, P, Attributes);\n    } catch (e) { /* empty */ }\n    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n    if ('value' in Attributes) O[P] = Attributes.value;\n    return O;\n  };\n\n  var _objectDp = {\n  \tf: f\n  };\n\n  var _propertyDesc = function (bitmap, value) {\n    return {\n      enumerable: !(bitmap & 1),\n      configurable: !(bitmap & 2),\n      writable: !(bitmap & 4),\n      value: value\n    };\n  };\n\n  var _hide = _descriptors ? function (object, key, value) {\n    return _objectDp.f(object, key, _propertyDesc(1, value));\n  } : function (object, key, value) {\n    object[key] = value;\n    return object;\n  };\n\n  var _redefine = createCommonjsModule(function (module) {\n  var SRC = _uid('src');\n  var TO_STRING = 'toString';\n  var $toString = Function[TO_STRING];\n  var TPL = ('' + $toString).split(TO_STRING);\n\n  _core.inspectSource = function (it) {\n    return $toString.call(it);\n  };\n\n  (module.exports = function (O, key, val, safe) {\n    var isFunction = typeof val == 'function';\n    if (isFunction) _has(val, 'name') || _hide(val, 'name', key);\n    if (O[key] === val) return;\n    if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n    if (O === _global) {\n      O[key] = val;\n    } else if (!safe) {\n      delete O[key];\n      _hide(O, key, val);\n    } else if (O[key]) {\n      O[key] = val;\n    } else {\n      _hide(O, key, val);\n    }\n  // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n  })(Function.prototype, TO_STRING, function toString() {\n    return typeof this == 'function' && this[SRC] || $toString.call(this);\n  });\n  });\n\n  var _aFunction = function (it) {\n    if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n    return it;\n  };\n\n  // optional / simple context binding\n\n  var _ctx = function (fn, that, length) {\n    _aFunction(fn);\n    if (that === undefined) return fn;\n    switch (length) {\n      case 1: return function (a) {\n        return fn.call(that, a);\n      };\n      case 2: return function (a, b) {\n        return fn.call(that, a, b);\n      };\n      case 3: return function (a, b, c) {\n        return fn.call(that, a, b, c);\n      };\n    }\n    return function (/* ...args */) {\n      return fn.apply(that, arguments);\n    };\n  };\n\n  var PROTOTYPE = 'prototype';\n\n  var $export = function (type, name, source) {\n    var IS_FORCED = type & $export.F;\n    var IS_GLOBAL = type & $export.G;\n    var IS_STATIC = type & $export.S;\n    var IS_PROTO = type & $export.P;\n    var IS_BIND = type & $export.B;\n    var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];\n    var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});\n    var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n    var key, own, out, exp;\n    if (IS_GLOBAL) source = name;\n    for (key in source) {\n      // contains in native\n      own = !IS_FORCED && target && target[key] !== undefined;\n      // export native or passed\n      out = (own ? target : source)[key];\n      // bind timers to global for call from export context\n      exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;\n      // extend global\n      if (target) _redefine(target, key, out, type & $export.U);\n      // export\n      if (exports[key] != out) _hide(exports, key, exp);\n      if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n    }\n  };\n  _global.core = _core;\n  // type bitmap\n  $export.F = 1;   // forced\n  $export.G = 2;   // global\n  $export.S = 4;   // static\n  $export.P = 8;   // proto\n  $export.B = 16;  // bind\n  $export.W = 32;  // wrap\n  $export.U = 64;  // safe\n  $export.R = 128; // real proto method for `library`\n  var _export = $export;\n\n  // most Object methods by ES6 should accept primitives\n\n\n\n  var _objectSap = function (KEY, exec) {\n    var fn = (_core.Object || {})[KEY] || Object[KEY];\n    var exp = {};\n    exp[KEY] = exec(fn);\n    _export(_export.S + _export.F * _fails(function () { fn(1); }), 'Object', exp);\n  };\n\n  // 19.1.2.14 Object.keys(O)\n\n\n\n  _objectSap('keys', function () {\n    return function keys(it) {\n      return _objectKeys(_toObject(it));\n    };\n  });\n\n  var keys = _core.Object.keys;\n\n  var _stringRepeat = function repeat(count) {\n    var str = String(_defined(this));\n    var res = '';\n    var n = _toInteger(count);\n    if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n    for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n    return res;\n  };\n\n  _export(_export.P, 'String', {\n    // 21.1.3.13 String.prototype.repeat(count)\n    repeat: _stringRepeat\n  });\n\n  var repeat = _core.String.repeat;\n\n  // https://github.com/tc39/proposal-string-pad-start-end\n\n\n\n\n  var _stringPad = function (that, maxLength, fillString, left) {\n    var S = String(_defined(that));\n    var stringLength = S.length;\n    var fillStr = fillString === undefined ? ' ' : String(fillString);\n    var intMaxLength = _toLength(maxLength);\n    if (intMaxLength <= stringLength || fillStr == '') return S;\n    var fillLen = intMaxLength - stringLength;\n    var stringFiller = _stringRepeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\n    if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\n    return left ? stringFiller + S : S + stringFiller;\n  };\n\n  var navigator = _global.navigator;\n\n  var _userAgent = navigator && navigator.userAgent || '';\n\n  // https://github.com/tc39/proposal-string-pad-start-end\n\n\n\n\n  // https://github.com/zloirock/core-js/issues/280\n  _export(_export.P + _export.F * /Version\\/10\\.\\d+(\\.\\d+)? Safari\\//.test(_userAgent), 'String', {\n    padStart: function padStart(maxLength /* , fillString = ' ' */) {\n      return _stringPad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);\n    }\n  });\n\n  var padStart = _core.String.padStart;\n\n  // https://github.com/tc39/proposal-string-pad-start-end\n\n\n\n\n  // https://github.com/zloirock/core-js/issues/280\n  _export(_export.P + _export.F * /Version\\/10\\.\\d+(\\.\\d+)? Safari\\//.test(_userAgent), 'String', {\n    padEnd: function padEnd(maxLength /* , fillString = ' ' */) {\n      return _stringPad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);\n    }\n  });\n\n  var padEnd = _core.String.padEnd;\n\n  function _typeof(obj) {\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function _extends() {\n    _extends = Object.assign || function (target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n\n      return target;\n    };\n\n    return _extends.apply(this, arguments);\n  }\n\n  function _objectSpread(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n      var ownKeys = Object.keys(source);\n\n      if (typeof Object.getOwnPropertySymbols === 'function') {\n        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n          return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n        }));\n      }\n\n      ownKeys.forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    }\n\n    return target;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n\n    for (i = 0; i < sourceKeys.length; i++) {\n      key = sourceKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      target[key] = source[key];\n    }\n\n    return target;\n  }\n\n  function _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n\n    var key, i;\n\n    if (Object.getOwnPropertySymbols) {\n      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n      for (i = 0; i < sourceSymbolKeys.length; i++) {\n        key = sourceSymbolKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n        target[key] = source[key];\n      }\n    }\n\n    return target;\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n      return call;\n    }\n\n    return _assertThisInitialized(self);\n  }\n\n  function _superPropBase(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n      object = _getPrototypeOf(object);\n      if (object === null) break;\n    }\n\n    return object;\n  }\n\n  function _get(target, property, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) {\n      _get = Reflect.get;\n    } else {\n      _get = function _get(target, property, receiver) {\n        var base = _superPropBase(target, property);\n\n        if (!base) return;\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.get) {\n          return desc.get.call(receiver);\n        }\n\n        return desc.value;\n      };\n    }\n\n    return _get(target, property, receiver || target);\n  }\n\n  function set(target, property, value, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.set) {\n      set = Reflect.set;\n    } else {\n      set = function set(target, property, value, receiver) {\n        var base = _superPropBase(target, property);\n\n        var desc;\n\n        if (base) {\n          desc = Object.getOwnPropertyDescriptor(base, property);\n\n          if (desc.set) {\n            desc.set.call(receiver, value);\n            return true;\n          } else if (!desc.writable) {\n            return false;\n          }\n        }\n\n        desc = Object.getOwnPropertyDescriptor(receiver, property);\n\n        if (desc) {\n          if (!desc.writable) {\n            return false;\n          }\n\n          desc.value = value;\n          Object.defineProperty(receiver, property, desc);\n        } else {\n          _defineProperty(receiver, property, value);\n        }\n\n        return true;\n      };\n    }\n\n    return set(target, property, value, receiver);\n  }\n\n  function _set(target, property, value, receiver, isStrict) {\n    var s = set(target, property, value, receiver || target);\n\n    if (!s && isStrict) {\n      throw new Error('failed to set property');\n    }\n\n    return value;\n  }\n\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n  }\n\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n\n  function _iterableToArrayLimit(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }\n\n  /** Checks if value is string */\n  function isString(str) {\n    return typeof str === 'string' || str instanceof String;\n  }\n  /**\r\n    Direction\r\n    @prop {string} NONE\r\n    @prop {string} LEFT\r\n    @prop {string} FORCE_LEFT\r\n    @prop {string} RIGHT\r\n    @prop {string} FORCE_RIGHT\r\n  */\n\n  var DIRECTION = {\n    NONE: 'NONE',\n    LEFT: 'LEFT',\n    FORCE_LEFT: 'FORCE_LEFT',\n    RIGHT: 'RIGHT',\n    FORCE_RIGHT: 'FORCE_RIGHT'\n    /**\r\n      Direction\r\n      @enum {string}\r\n    */\n\n  };\n\n  /** Returns next char index in direction */\n  function indexInDirection(pos, direction) {\n    if (direction === DIRECTION.LEFT) --pos;\n    return pos;\n  }\n  /** Returns next char position in direction */\n\n  function posInDirection(pos, direction) {\n    switch (direction) {\n      case DIRECTION.LEFT:\n        return --pos;\n\n      case DIRECTION.RIGHT:\n      case DIRECTION.FORCE_RIGHT:\n        return ++pos;\n\n      default:\n        return pos;\n    }\n  }\n  /** */\n\n  function forceDirection(direction) {\n    switch (direction) {\n      case DIRECTION.LEFT:\n        return DIRECTION.FORCE_LEFT;\n\n      case DIRECTION.RIGHT:\n        return DIRECTION.FORCE_RIGHT;\n\n      default:\n        return direction;\n    }\n  }\n  /** Escapes regular expression control chars */\n\n  function escapeRegExp(str) {\n    return str.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1');\n  } // cloned from https://github.com/epoberezkin/fast-deep-equal with small changes\n\n  function objectIncludes(b, a) {\n    if (a === b) return true;\n    var arrA = Array.isArray(a),\n        arrB = Array.isArray(b),\n        i;\n\n    if (arrA && arrB) {\n      if (a.length != b.length) return false;\n\n      for (i = 0; i < a.length; i++) {\n        if (!objectIncludes(a[i], b[i])) return false;\n      }\n\n      return true;\n    }\n\n    if (arrA != arrB) return false;\n\n    if (a && b && _typeof(a) === 'object' && _typeof(b) === 'object') {\n      var dateA = a instanceof Date,\n          dateB = b instanceof Date;\n      if (dateA && dateB) return a.getTime() == b.getTime();\n      if (dateA != dateB) return false;\n      var regexpA = a instanceof RegExp,\n          regexpB = b instanceof RegExp;\n      if (regexpA && regexpB) return a.toString() == b.toString();\n      if (regexpA != regexpB) return false;\n      var keys = Object.keys(a); // if (keys.length !== Object.keys(b).length) return false;\n\n      for (i = 0; i < keys.length; i++) {\n        if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n      }\n\n      for (i = 0; i < keys.length; i++) {\n        if (!objectIncludes(b[keys[i]], a[keys[i]])) return false;\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n  /* eslint-disable no-undef */\n\n  var g = typeof window !== 'undefined' && window || typeof global !== 'undefined' && global.global === global && global || typeof self !== 'undefined' && self.self === self && self || {};\n  /* eslint-enable no-undef */\n\n  /** Selection range */\n\n  /** Provides details of changing input */\n\n  var ActionDetails =\n  /*#__PURE__*/\n  function () {\n    /** Current input value */\n\n    /** Current cursor position */\n\n    /** Old input value */\n\n    /** Old selection */\n    function ActionDetails(value, cursorPos, oldValue, oldSelection) {\n      _classCallCheck(this, ActionDetails);\n\n      this.value = value;\n      this.cursorPos = cursorPos;\n      this.oldValue = oldValue;\n      this.oldSelection = oldSelection; // double check if left part was changed (autofilling, other non-standard input triggers)\n\n      while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\n        --this.oldSelection.start;\n      }\n    }\n    /**\r\n      Start changing position\r\n      @readonly\r\n    */\n\n\n    _createClass(ActionDetails, [{\n      key: \"startChangePos\",\n      get: function get() {\n        return Math.min(this.cursorPos, this.oldSelection.start);\n      }\n      /**\r\n        Inserted symbols count\r\n        @readonly\r\n      */\n\n    }, {\n      key: \"insertedCount\",\n      get: function get() {\n        return this.cursorPos - this.startChangePos;\n      }\n      /**\r\n        Inserted symbols\r\n        @readonly\r\n      */\n\n    }, {\n      key: \"inserted\",\n      get: function get() {\n        return this.value.substr(this.startChangePos, this.insertedCount);\n      }\n      /**\r\n        Removed symbols count\r\n        @readonly\r\n      */\n\n    }, {\n      key: \"removedCount\",\n      get: function get() {\n        // Math.max for opposite operation\n        return Math.max(this.oldSelection.end - this.startChangePos || // for Delete\n        this.oldValue.length - this.value.length, 0);\n      }\n      /**\r\n        Removed symbols\r\n        @readonly\r\n      */\n\n    }, {\n      key: \"removed\",\n      get: function get() {\n        return this.oldValue.substr(this.startChangePos, this.removedCount);\n      }\n      /**\r\n        Unchanged head symbols\r\n        @readonly\r\n      */\n\n    }, {\n      key: \"head\",\n      get: function get() {\n        return this.value.substring(0, this.startChangePos);\n      }\n      /**\r\n        Unchanged tail symbols\r\n        @readonly\r\n      */\n\n    }, {\n      key: \"tail\",\n      get: function get() {\n        return this.value.substring(this.startChangePos + this.insertedCount);\n      }\n      /**\r\n        Remove direction\r\n        @readonly\r\n      */\n\n    }, {\n      key: \"removeDirection\",\n      get: function get() {\n        if (!this.removedCount || this.insertedCount) return DIRECTION.NONE; // align right if delete at right or if range removed (event with backspace)\n\n        return this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos ? DIRECTION.RIGHT : DIRECTION.LEFT;\n      }\n    }]);\n\n    return ActionDetails;\n  }();\n\n  /**\r\n    Provides details of changing model value\r\n    @param {Object} [details]\r\n    @param {string} [details.inserted] - Inserted symbols\r\n    @param {boolean} [details.skip] - Can skip chars\r\n    @param {number} [details.removeCount] - Removed symbols count\r\n    @param {number} [details.tailShift] - Additional offset if any changes occurred before tail\r\n  */\n  var ChangeDetails =\n  /*#__PURE__*/\n  function () {\n    /** Inserted symbols */\n\n    /** Can skip chars */\n\n    /** Additional offset if any changes occurred before tail */\n\n    /** Raw inserted is used by dynamic mask */\n    function ChangeDetails(details) {\n      _classCallCheck(this, ChangeDetails);\n\n      _extends(this, {\n        inserted: '',\n        rawInserted: '',\n        skip: false,\n        tailShift: 0\n      }, details);\n    }\n    /**\r\n      Aggregate changes\r\n      @returns {ChangeDetails} `this`\r\n    */\n\n\n    _createClass(ChangeDetails, [{\n      key: \"aggregate\",\n      value: function aggregate(details) {\n        this.rawInserted += details.rawInserted;\n        this.skip = this.skip || details.skip;\n        this.inserted += details.inserted;\n        this.tailShift += details.tailShift;\n        return this;\n      }\n      /** Total offset considering all changes */\n\n    }, {\n      key: \"offset\",\n      get: function get() {\n        return this.tailShift + this.inserted.length;\n      }\n    }]);\n\n    return ChangeDetails;\n  }();\n\n  /** Provides common masking stuff */\n  var Masked =\n  /*#__PURE__*/\n  function () {\n    // $Shape<MaskedOptions>; TODO after fix https://github.com/facebook/flow/issues/4773\n\n    /** @type {Mask} */\n\n    /** */\n    // $FlowFixMe TODO no ideas\n\n    /** Transforms value before mask processing */\n\n    /** Validates if value is acceptable */\n\n    /** Does additional processing in the end of editing */\n\n    /** */\n    function Masked(opts) {\n      _classCallCheck(this, Masked);\n\n      this._value = '';\n\n      this._update(opts);\n\n      this.isInitialized = true;\n    }\n    /** Sets and applies new options */\n\n\n    _createClass(Masked, [{\n      key: \"updateOptions\",\n      value: function updateOptions(opts) {\n        this.withValueRefresh(this._update.bind(this, opts));\n      }\n      /**\r\n        Sets new options\r\n        @protected\r\n      */\n\n    }, {\n      key: \"_update\",\n      value: function _update(opts) {\n        _extends(this, opts);\n      }\n    }, {\n      key: \"reset\",\n\n      /** Resets value */\n      value: function reset() {\n        this._value = '';\n      }\n      /** */\n\n    }, {\n      key: \"resolve\",\n\n      /** Resolve new value */\n      value: function resolve(value) {\n        this.reset();\n        this.append(value, {\n          input: true\n        }, {\n          value: ''\n        });\n        this.doCommit();\n        return this.value;\n      }\n      /** */\n\n    }, {\n      key: \"nearestInputPos\",\n\n      /** Finds nearest input position in direction */\n      value: function nearestInputPos(cursorPos, direction) {\n        return cursorPos;\n      }\n      /** Extracts value in range considering flags */\n\n    }, {\n      key: \"extractInput\",\n      value: function extractInput() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n        return this.value.slice(fromPos, toPos);\n      }\n      /** Extracts tail in range */\n\n    }, {\n      key: \"extractTail\",\n      value: function extractTail() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n        return {\n          value: this.extractInput(fromPos, toPos)\n        };\n      }\n      /** Stores state before tail */\n\n    }, {\n      key: \"_storeBeforeTailState\",\n      value: function _storeBeforeTailState() {\n        this._beforeTailState = this.state;\n      }\n      /** Restores state before tail */\n\n    }, {\n      key: \"_restoreBeforeTailState\",\n      value: function _restoreBeforeTailState() {\n        this.state = this._beforeTailState;\n      }\n      /** Resets state before tail */\n\n    }, {\n      key: \"_resetBeforeTailState\",\n      value: function _resetBeforeTailState() {\n        this._beforeTailState = null;\n      }\n      /** Appends tail */\n\n    }, {\n      key: \"appendTail\",\n      value: function appendTail(tail) {\n        return this.append(tail ? tail.value : '', {\n          tail: true\n        });\n      }\n      /** Appends char */\n\n    }, {\n      key: \"_appendCharRaw\",\n      value: function _appendCharRaw(ch) {\n        this._value += ch;\n        return new ChangeDetails({\n          inserted: ch,\n          rawInserted: ch\n        });\n      }\n      /** Appends char */\n\n    }, {\n      key: \"_appendChar\",\n      value: function _appendChar(ch) {\n        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var checkTail = arguments.length > 2 ? arguments[2] : undefined;\n        ch = this.doPrepare(ch, flags);\n        if (!ch) return new ChangeDetails();\n        var consistentState = this.state;\n\n        var details = this._appendCharRaw(ch, flags);\n\n        if (details.inserted) {\n          var appended = this.doValidate(flags) !== false;\n\n          if (appended && checkTail != null) {\n            // validation ok, check tail\n            this._storeBeforeTailState();\n\n            var tailDetails = this.appendTail(checkTail);\n            appended = tailDetails.rawInserted === checkTail.value; // if ok, rollback state after tail\n\n            if (appended && tailDetails.inserted) this._restoreBeforeTailState();\n          } // revert all if something went wrong\n\n\n          if (!appended) {\n            details.rawInserted = details.inserted = '';\n            this.state = consistentState;\n          }\n        }\n\n        return details;\n      }\n      /** Appends symbols considering flags */\n\n    }, {\n      key: \"append\",\n      value: function append(str, flags, tail) {\n        var oldValueLength = this.value.length;\n        var details = new ChangeDetails();\n\n        for (var ci = 0; ci < str.length; ++ci) {\n          details.aggregate(this._appendChar(str[ci], flags, tail));\n        } // append tail but aggregate only tailShift\n\n\n        if (tail != null) {\n          this._storeBeforeTailState();\n\n          details.tailShift += this.appendTail(tail).tailShift; // TODO it's a good idea to clear state after appending ends\n          // but it causes bugs when one append calls another (when dynamic dispatch set rawInputValue)\n          // this._resetBeforeTailState();\n        }\n\n        return details;\n      }\n      /** */\n\n    }, {\n      key: \"remove\",\n      value: function remove() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n        this._value = this.value.slice(0, fromPos) + this.value.slice(toPos);\n        return new ChangeDetails();\n      }\n      /** Calls function and reapplies current value */\n\n    }, {\n      key: \"withValueRefresh\",\n      value: function withValueRefresh(fn) {\n        if (this._refreshing || !this.isInitialized) return fn();\n        this._refreshing = true;\n        var unmasked = this.unmaskedValue;\n        var value = this.value;\n        var ret = fn(); // try to update with raw value first to keep fixed chars\n\n        if (this.resolve(value) !== value) {\n          // or fallback to unmasked\n          this.unmaskedValue = unmasked;\n        }\n\n        delete this._refreshing;\n        return ret;\n      }\n      /**\r\n        Prepares string before mask processing\r\n        @protected\r\n      */\n\n    }, {\n      key: \"doPrepare\",\n      value: function doPrepare(str) {\n        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.prepare ? this.prepare(str, this, flags) : str;\n      }\n      /**\r\n        Validates if value is acceptable\r\n        @protected\r\n      */\n\n    }, {\n      key: \"doValidate\",\n      value: function doValidate(flags) {\n        return (!this.validate || this.validate(this.value, this, flags)) && (!this.parent || this.parent.doValidate(flags));\n      }\n      /**\r\n        Does additional processing in the end of editing\r\n        @protected\r\n      */\n\n    }, {\n      key: \"doCommit\",\n      value: function doCommit() {\n        if (this.commit) this.commit(this.value, this);\n      }\n      /** */\n\n    }, {\n      key: \"splice\",\n      value: function splice(start, deleteCount, inserted, removeDirection) {\n        var tailPos = start + deleteCount;\n        var tail = this.extractTail(tailPos);\n        var startChangePos = this.nearestInputPos(start, removeDirection);\n        var changeDetails = new ChangeDetails({\n          tailShift: startChangePos - start // adjust tailShift if start was aligned\n\n        }).aggregate(this.remove(startChangePos)).aggregate(this.append(inserted, {\n          input: true\n        }, tail));\n        return changeDetails;\n      }\n    }, {\n      key: \"state\",\n      get: function get() {\n        return {\n          _value: this.value\n        };\n      },\n      set: function set(state) {\n        this._value = state._value;\n      }\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._value;\n      },\n      set: function set(value) {\n        this.resolve(value);\n      }\n    }, {\n      key: \"unmaskedValue\",\n      get: function get() {\n        return this.value;\n      },\n      set: function set(value) {\n        this.reset();\n        this.append(value, {}, {\n          value: ''\n        });\n        this.doCommit();\n      }\n      /** */\n\n    }, {\n      key: \"typedValue\",\n      get: function get() {\n        return this.unmaskedValue;\n      },\n      set: function set(value) {\n        this.unmaskedValue = value;\n      }\n      /** Value that includes raw user input */\n\n    }, {\n      key: \"rawInputValue\",\n      get: function get() {\n        return this.extractInput(0, this.value.length, {\n          raw: true\n        });\n      },\n      set: function set(value) {\n        this.reset();\n        this.append(value, {\n          raw: true\n        }, {\n          value: ''\n        });\n        this.doCommit();\n      }\n      /** */\n\n    }, {\n      key: \"isComplete\",\n      get: function get() {\n        return true;\n      }\n    }]);\n\n    return Masked;\n  }();\n\n  /** Get Masked class by mask type */\n  function maskedClass(mask) {\n    if (mask == null) {\n      throw new Error('mask property should be defined');\n    }\n\n    if (mask instanceof RegExp) return g.IMask.MaskedRegExp;\n    if (isString(mask)) return g.IMask.MaskedPattern;\n    if (mask instanceof Date || mask === Date) return g.IMask.MaskedDate;\n    if (mask instanceof Number || typeof mask === 'number' || mask === Number) return g.IMask.MaskedNumber;\n    if (Array.isArray(mask) || mask === Array) return g.IMask.MaskedDynamic; // $FlowFixMe\n\n    if (mask.prototype instanceof g.IMask.Masked) return mask; // $FlowFixMe\n\n    if (mask instanceof Function) return g.IMask.MaskedFunction;\n    console.warn('Mask not found for mask', mask); // eslint-disable-line no-console\n\n    return g.IMask.Masked;\n  }\n  /** Creates new {@link Masked} depending on mask type */\n\n  function createMask(opts) {\n    opts = _objectSpread({}, opts);\n    var mask = opts.mask;\n    if (mask instanceof g.IMask.Masked) return mask;\n    var MaskedClass = maskedClass(mask);\n    return new MaskedClass(opts);\n  }\n\n  var DEFAULT_INPUT_DEFINITIONS = {\n    '0': /\\d/,\n    'a': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\n    // http://stackoverflow.com/a/22075070\n    '*': /./\n  };\n  /** */\n\n  var PatternInputDefinition =\n  /*#__PURE__*/\n  function () {\n    /** */\n\n    /** */\n\n    /** */\n\n    /** */\n\n    /** */\n\n    /** */\n    function PatternInputDefinition(opts) {\n      _classCallCheck(this, PatternInputDefinition);\n\n      var mask = opts.mask,\n          blockOpts = _objectWithoutProperties(opts, [\"mask\"]);\n\n      this.masked = createMask({\n        mask: mask\n      });\n\n      _extends(this, blockOpts);\n    }\n\n    _createClass(PatternInputDefinition, [{\n      key: \"reset\",\n      value: function reset() {\n        this._isFilled = false;\n        this.masked.reset();\n      }\n    }, {\n      key: \"remove\",\n      value: function remove() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n\n        if (fromPos === 0 && toPos >= 1) {\n          this._isFilled = false;\n          return this.masked.remove(fromPos, toPos);\n        }\n\n        return new ChangeDetails();\n      }\n    }, {\n      key: \"_appendChar\",\n      value: function _appendChar(str) {\n        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        if (this._isFilled) return new ChangeDetails();\n        var state = this.masked.state; // simulate input\n\n        var details = this.masked._appendChar(str, flags);\n\n        if (details.inserted && this.doValidate(flags) === false) {\n          details.inserted = details.rawInserted = '';\n          this.masked.state = state;\n        }\n\n        if (!details.inserted && !this.isOptional && !this.lazy && !flags.input) {\n          details.inserted = this.placeholderChar;\n        }\n\n        details.skip = !details.inserted && !this.isOptional;\n        this._isFilled = Boolean(details.inserted);\n        return details;\n      }\n    }, {\n      key: \"_appendPlaceholder\",\n      value: function _appendPlaceholder() {\n        var details = new ChangeDetails();\n        if (this._isFilled || this.isOptional) return details;\n        this._isFilled = true;\n        details.inserted = this.placeholderChar;\n        return details;\n      }\n    }, {\n      key: \"extractTail\",\n      value: function extractTail() {\n        var _this$masked;\n\n        return (_this$masked = this.masked).extractTail.apply(_this$masked, arguments);\n      }\n    }, {\n      key: \"appendTail\",\n      value: function appendTail() {\n        var _this$masked2;\n\n        return (_this$masked2 = this.masked).appendTail.apply(_this$masked2, arguments);\n      }\n    }, {\n      key: \"extractInput\",\n      value: function extractInput() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n        var flags = arguments.length > 2 ? arguments[2] : undefined;\n        return this.masked.extractInput(fromPos, toPos, flags);\n      }\n    }, {\n      key: \"nearestInputPos\",\n      value: function nearestInputPos(cursorPos) {\n        var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DIRECTION.NONE;\n        var minPos = 0;\n        var maxPos = this.value.length;\n        var boundPos = Math.min(Math.max(cursorPos, minPos), maxPos);\n\n        switch (direction) {\n          case DIRECTION.LEFT:\n          case DIRECTION.FORCE_LEFT:\n            return this.isComplete ? boundPos : minPos;\n\n          case DIRECTION.RIGHT:\n          case DIRECTION.FORCE_RIGHT:\n            return this.isComplete ? boundPos : maxPos;\n\n          case DIRECTION.NONE:\n          default:\n            return boundPos;\n        }\n      }\n    }, {\n      key: \"doValidate\",\n      value: function doValidate() {\n        var _this$masked3, _this$parent;\n\n        return (_this$masked3 = this.masked).doValidate.apply(_this$masked3, arguments) && (!this.parent || (_this$parent = this.parent).doValidate.apply(_this$parent, arguments));\n      }\n    }, {\n      key: \"doCommit\",\n      value: function doCommit() {\n        this.masked.doCommit();\n      }\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this.masked.value || (this._isFilled && !this.isOptional ? this.placeholderChar : '');\n      }\n    }, {\n      key: \"unmaskedValue\",\n      get: function get() {\n        return this.masked.unmaskedValue;\n      }\n    }, {\n      key: \"isComplete\",\n      get: function get() {\n        return Boolean(this.masked.value) || this.isOptional;\n      }\n    }, {\n      key: \"state\",\n      get: function get() {\n        return {\n          masked: this.masked.state,\n          _isFilled: this._isFilled\n        };\n      },\n      set: function set(state) {\n        this.masked.state = state.masked;\n        this._isFilled = state._isFilled;\n      }\n    }]);\n\n    return PatternInputDefinition;\n  }();\n\n  var PatternFixedDefinition =\n  /*#__PURE__*/\n  function () {\n    /** */\n\n    /** */\n\n    /** */\n\n    /** */\n    function PatternFixedDefinition(opts) {\n      _classCallCheck(this, PatternFixedDefinition);\n\n      _extends(this, opts);\n\n      this._value = '';\n    }\n\n    _createClass(PatternFixedDefinition, [{\n      key: \"reset\",\n      value: function reset() {\n        this._isRawInput = false;\n        this._value = '';\n      }\n    }, {\n      key: \"remove\",\n      value: function remove() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._value.length;\n        this._value = this._value.slice(0, fromPos) + this._value.slice(toPos);\n        if (!this._value) this._isRawInput = false;\n        return new ChangeDetails();\n      }\n    }, {\n      key: \"nearestInputPos\",\n      value: function nearestInputPos(cursorPos) {\n        var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DIRECTION.NONE;\n        var minPos = 0;\n        var maxPos = this._value.length;\n\n        switch (direction) {\n          case DIRECTION.LEFT:\n          case DIRECTION.FORCE_LEFT:\n            return minPos;\n\n          case DIRECTION.NONE:\n          case DIRECTION.RIGHT:\n          case DIRECTION.FORCE_RIGHT:\n          default:\n            return maxPos;\n        }\n      }\n    }, {\n      key: \"extractInput\",\n      value: function extractInput() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._value.length;\n        var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return flags.raw && this._isRawInput && this._value.slice(fromPos, toPos) || '';\n      }\n    }, {\n      key: \"_appendChar\",\n      value: function _appendChar(str, flags) {\n        var details = new ChangeDetails();\n        if (this._value) return details;\n        var appended = this.char === str[0];\n        var isResolved = appended && (this.isUnmasking || flags.input || flags.raw) && !flags.tail;\n        if (isResolved) details.rawInserted = this.char;\n        this._value = details.inserted = this.char;\n        this._isRawInput = isResolved && (flags.raw || flags.input);\n        return details;\n      }\n    }, {\n      key: \"_appendPlaceholder\",\n      value: function _appendPlaceholder() {\n        var details = new ChangeDetails();\n        if (this._value) return details;\n        this._value = details.inserted = this.char;\n        return details;\n      }\n    }, {\n      key: \"extractTail\",\n      value: function extractTail() {\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n        return {\n          value: ''\n        };\n      }\n    }, {\n      key: \"appendTail\",\n      value: function appendTail(tail) {\n        return this._appendChar(tail ? tail.value : '', {\n          tail: true\n        });\n      }\n    }, {\n      key: \"doCommit\",\n      value: function doCommit() {}\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._value;\n      }\n    }, {\n      key: \"unmaskedValue\",\n      get: function get() {\n        return this.isUnmasking ? this.value : '';\n      }\n    }, {\n      key: \"isComplete\",\n      get: function get() {\n        return true;\n      }\n    }, {\n      key: \"state\",\n      get: function get() {\n        return {\n          _value: this._value,\n          _isRawInput: this._isRawInput\n        };\n      },\n      set: function set(state) {\n        _extends(this, state);\n      }\n    }]);\n\n    return PatternFixedDefinition;\n  }();\n\n  var ChunksTailDetails =\n  /*#__PURE__*/\n  function () {\n    function ChunksTailDetails(chunks) {\n      _classCallCheck(this, ChunksTailDetails);\n\n      this.chunks = chunks;\n    }\n\n    _createClass(ChunksTailDetails, [{\n      key: \"value\",\n      get: function get() {\n        return this.chunks.map(function (c) {\n          return c.value;\n        }).join('');\n      }\n    }]);\n\n    return ChunksTailDetails;\n  }();\n\n  /**\r\n    Pattern mask\r\n    @param {Object} opts\r\n    @param {Object} opts.blocks\r\n    @param {Object} opts.definitions\r\n    @param {string} opts.placeholderChar\r\n    @param {boolean} opts.lazy\r\n  */\n  var MaskedPattern =\n  /*#__PURE__*/\n  function (_Masked) {\n    _inherits(MaskedPattern, _Masked);\n\n    /** */\n\n    /** */\n\n    /** Single char for empty input */\n\n    /** Show placeholder only when needed */\n    function MaskedPattern() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _classCallCheck(this, MaskedPattern);\n\n      // TODO type $Shape<MaskedPatternOptions>={} does not work\n      opts.definitions = _extends({}, DEFAULT_INPUT_DEFINITIONS, opts.definitions);\n      return _possibleConstructorReturn(this, _getPrototypeOf(MaskedPattern).call(this, _objectSpread({}, MaskedPattern.DEFAULTS, opts)));\n    }\n    /**\r\n      @override\r\n      @param {Object} opts\r\n    */\n\n\n    _createClass(MaskedPattern, [{\n      key: \"_update\",\n      value: function _update() {\n        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        opts.definitions = _extends({}, this.definitions, opts.definitions);\n\n        _get(_getPrototypeOf(MaskedPattern.prototype), \"_update\", this).call(this, opts);\n\n        this._rebuildMask();\n      }\n      /** */\n\n    }, {\n      key: \"_rebuildMask\",\n      value: function _rebuildMask() {\n        var _this = this;\n\n        var defs = this.definitions;\n        this._blocks = [];\n        this._stops = [];\n        this._maskedBlocks = {};\n        var pattern = this.mask;\n        if (!pattern || !defs) return;\n        var unmaskingBlock = false;\n        var optionalBlock = false;\n\n        for (var i = 0; i < pattern.length; ++i) {\n          if (this.blocks) {\n            var _ret = function () {\n              var p = pattern.slice(i);\n              var bNames = Object.keys(_this.blocks).filter(function (bName) {\n                return p.indexOf(bName) === 0;\n              }); // order by key length\n\n              bNames.sort(function (a, b) {\n                return b.length - a.length;\n              }); // use block name with max length\n\n              var bName = bNames[0];\n\n              if (bName) {\n                var maskedBlock = createMask(_objectSpread({\n                  parent: _this,\n                  lazy: _this.lazy,\n                  placeholderChar: _this.placeholderChar\n                }, _this.blocks[bName]));\n\n                if (maskedBlock) {\n                  _this._blocks.push(maskedBlock); // store block index\n\n\n                  if (!_this._maskedBlocks[bName]) _this._maskedBlocks[bName] = [];\n\n                  _this._maskedBlocks[bName].push(_this._blocks.length - 1);\n                }\n\n                i += bName.length - 1;\n                return \"continue\";\n              }\n            }();\n\n            if (_ret === \"continue\") continue;\n          }\n\n          var char = pattern[i];\n\n          var _isInput = char in defs;\n\n          if (char === MaskedPattern.STOP_CHAR) {\n            this._stops.push(this._blocks.length);\n\n            continue;\n          }\n\n          if (char === '{' || char === '}') {\n            unmaskingBlock = !unmaskingBlock;\n            continue;\n          }\n\n          if (char === '[' || char === ']') {\n            optionalBlock = !optionalBlock;\n            continue;\n          }\n\n          if (char === MaskedPattern.ESCAPE_CHAR) {\n            ++i;\n            char = pattern[i];\n            if (!char) break;\n            _isInput = false;\n          }\n\n          var def = void 0;\n\n          if (_isInput) {\n            def = new PatternInputDefinition({\n              parent: this,\n              lazy: this.lazy,\n              placeholderChar: this.placeholderChar,\n              mask: defs[char],\n              isOptional: optionalBlock\n            });\n          } else {\n            def = new PatternFixedDefinition({\n              char: char,\n              isUnmasking: unmaskingBlock\n            });\n          }\n\n          this._blocks.push(def);\n        }\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"_storeBeforeTailState\",\n\n      /**\r\n        @override\r\n      */\n      value: function _storeBeforeTailState() {\n        this._blocks.forEach(function (b) {\n          // $FlowFixMe _storeBeforeTailState is not exist in PatternBlock\n          if (typeof b._storeBeforeTailState === 'function') {\n            b._storeBeforeTailState();\n          }\n        });\n\n        _get(_getPrototypeOf(MaskedPattern.prototype), \"_storeBeforeTailState\", this).call(this);\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"_restoreBeforeTailState\",\n      value: function _restoreBeforeTailState() {\n        this._blocks.forEach(function (b) {\n          // $FlowFixMe _restoreBeforeTailState is not exist in PatternBlock\n          if (typeof b._restoreBeforeTailState === 'function') {\n            b._restoreBeforeTailState();\n          }\n        });\n\n        _get(_getPrototypeOf(MaskedPattern.prototype), \"_restoreBeforeTailState\", this).call(this);\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"_resetBeforeTailState\",\n      value: function _resetBeforeTailState() {\n        this._blocks.forEach(function (b) {\n          // $FlowFixMe _resetBeforeTailState is not exist in PatternBlock\n          if (typeof b._resetBeforeTailState === 'function') {\n            b._resetBeforeTailState();\n          }\n        });\n\n        _get(_getPrototypeOf(MaskedPattern.prototype), \"_resetBeforeTailState\", this).call(this);\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        _get(_getPrototypeOf(MaskedPattern.prototype), \"reset\", this).call(this);\n\n        this._blocks.forEach(function (b) {\n          return b.reset();\n        });\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"doCommit\",\n\n      /**\r\n        @override\r\n      */\n      value: function doCommit() {\n        this._blocks.forEach(function (b) {\n          return b.doCommit();\n        });\n\n        _get(_getPrototypeOf(MaskedPattern.prototype), \"doCommit\", this).call(this);\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"appendTail\",\n\n      /**\r\n        @override\r\n      */\n      value: function appendTail(tail) {\n        var details = new ChangeDetails();\n\n        if (tail) {\n          details.aggregate(tail instanceof ChunksTailDetails ? this._appendTailChunks(tail.chunks) : _get(_getPrototypeOf(MaskedPattern.prototype), \"appendTail\", this).call(this, tail));\n        }\n\n        return details.aggregate(this._appendPlaceholder());\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"_appendCharRaw\",\n      value: function _appendCharRaw(ch) {\n        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var blockData = this._mapPosToBlock(this.value.length);\n\n        var details = new ChangeDetails();\n        if (!blockData) return details;\n\n        for (var bi = blockData.index;; ++bi) {\n          var _block = this._blocks[bi];\n          if (!_block) break;\n\n          var blockDetails = _block._appendChar(ch, flags);\n\n          var skip = blockDetails.skip;\n          details.aggregate(blockDetails);\n          if (skip || blockDetails.rawInserted) break; // go next char\n        }\n\n        return details;\n      }\n      /** Appends chunks splitted by stop chars */\n\n    }, {\n      key: \"_appendTailChunks\",\n      value: function _appendTailChunks(chunks) {\n        var details = new ChangeDetails();\n\n        for (var ci = 0; ci < chunks.length && !details.skip; ++ci) {\n          var chunk = chunks[ci];\n\n          var lastBlock = this._mapPosToBlock(this.value.length);\n\n          var chunkBlock = chunk instanceof ChunksTailDetails && chunk.index != null && (!lastBlock || lastBlock.index <= chunk.index) && this._blocks[chunk.index];\n\n          if (chunkBlock) {\n            // $FlowFixMe we already check index above\n            details.aggregate(this._appendPlaceholder(chunk.index));\n            var tailDetails = chunkBlock.appendTail(chunk);\n            tailDetails.skip = false; // always ignore skip, it will be set on last\n\n            details.aggregate(tailDetails);\n            this._value += tailDetails.inserted; // get not inserted chars\n\n            var remainChars = chunk.value.slice(tailDetails.rawInserted.length);\n            if (remainChars) details.aggregate(this.append(remainChars, {\n              tail: true\n            }));\n          } else {\n            var _ref = chunk,\n                stop = _ref.stop,\n                value = _ref.value;\n            if (stop != null && this._stops.indexOf(stop) >= 0) details.aggregate(this._appendPlaceholder(stop));\n            details.aggregate(this.append(value, {\n              tail: true\n            }));\n          }\n        }\n        return details;\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"extractTail\",\n      value: function extractTail() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n        return new ChunksTailDetails(this._extractTailChunks(fromPos, toPos));\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"extractInput\",\n      value: function extractInput() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n        var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        if (fromPos === toPos) return '';\n        var input = '';\n\n        this._forEachBlocksInRange(fromPos, toPos, function (b, _, fromPos, toPos) {\n          input += b.extractInput(fromPos, toPos, flags);\n        });\n\n        return input;\n      }\n      /** Extracts chunks from input splitted by stop chars */\n\n    }, {\n      key: \"_extractTailChunks\",\n      value: function _extractTailChunks() {\n        var _this2 = this;\n\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n        if (fromPos === toPos) return [];\n        var chunks = [];\n        var lastChunk;\n\n        this._forEachBlocksInRange(fromPos, toPos, function (b, bi, fromPos, toPos) {\n          var blockChunk = b.extractTail(fromPos, toPos);\n          var nearestStop;\n\n          for (var si = 0; si < _this2._stops.length; ++si) {\n            var stop = _this2._stops[si];\n            if (stop <= bi) nearestStop = stop;else break;\n          }\n\n          if (blockChunk instanceof ChunksTailDetails) {\n            // TODO append to lastChunk with same index\n            if (nearestStop == null) {\n              // try append floating chunks to existed lastChunk\n              var headFloatChunksCount = blockChunk.chunks.length;\n\n              for (var ci = 0; ci < blockChunk.chunks.length; ++ci) {\n                if (blockChunk.chunks[ci].stop != null) {\n                  headFloatChunksCount = ci;\n                  break;\n                }\n              }\n\n              var headFloatChunks = blockChunk.chunks.splice(0, headFloatChunksCount);\n              headFloatChunks.filter(function (chunk) {\n                return chunk.value;\n              }).forEach(function (chunk) {\n                if (lastChunk) lastChunk.value += chunk.value; // will flat nested chunks\n                else lastChunk = {\n                    value: chunk.value\n                  };\n              });\n            } // if block chunk has stops\n\n\n            if (blockChunk.chunks.length) {\n              if (lastChunk) chunks.push(lastChunk);\n              blockChunk.index = nearestStop;\n              chunks.push(blockChunk); // we cant append to ChunksTailDetails, so just reset lastChunk to force adding new\n\n              lastChunk = null;\n            }\n          } else {\n            if (nearestStop != null) {\n              // on middle chunks consider stop flag and do not consider value\n              // add block even if it is empty\n              if (lastChunk) chunks.push(lastChunk);\n              blockChunk.stop = nearestStop;\n            } else if (lastChunk) {\n              lastChunk.value += blockChunk.value;\n              return;\n            }\n\n            lastChunk = blockChunk;\n          }\n        });\n\n        if (lastChunk && lastChunk.value) chunks.push(lastChunk);\n        return chunks;\n      }\n      /** Appends placeholder depending on laziness */\n\n    }, {\n      key: \"_appendPlaceholder\",\n      value: function _appendPlaceholder(toBlockIndex) {\n        var _this3 = this;\n\n        var details = new ChangeDetails();\n        if (this.lazy && toBlockIndex == null) return details;\n\n        var startBlockData = this._mapPosToBlock(this.value.length);\n\n        if (!startBlockData) return details;\n        var startBlockIndex = startBlockData.index;\n        var endBlockIndex = toBlockIndex != null ? toBlockIndex : this._blocks.length;\n\n        this._blocks.slice(startBlockIndex, endBlockIndex).forEach(function (b) {\n          if (typeof b._appendPlaceholder === 'function') {\n            // $FlowFixMe `_blocks` may not be present\n            var args = b._blocks != null ? [b._blocks.length] : [];\n\n            var bDetails = b._appendPlaceholder.apply(b, args);\n\n            _this3._value += bDetails.inserted;\n            details.aggregate(bDetails);\n          }\n        });\n\n        return details;\n      }\n      /** Finds block in pos */\n\n    }, {\n      key: \"_mapPosToBlock\",\n      value: function _mapPosToBlock(pos) {\n        var accVal = '';\n\n        for (var bi = 0; bi < this._blocks.length; ++bi) {\n          var _block2 = this._blocks[bi];\n          var blockStartPos = accVal.length;\n          accVal += _block2.value;\n\n          if (pos <= accVal.length) {\n            return {\n              index: bi,\n              offset: pos - blockStartPos\n            };\n          }\n        }\n      }\n    }, {\n      key: \"_blockStartPos\",\n      value: function _blockStartPos(blockIndex) {\n        return this._blocks.slice(0, blockIndex).reduce(function (pos, b) {\n          return pos += b.value.length;\n        }, 0);\n      }\n    }, {\n      key: \"_forEachBlocksInRange\",\n      value: function _forEachBlocksInRange(fromPos) {\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n        var fn = arguments.length > 2 ? arguments[2] : undefined;\n\n        var fromBlock = this._mapPosToBlock(fromPos);\n\n        if (fromBlock) {\n          var toBlock = this._mapPosToBlock(toPos); // process first block\n\n\n          var isSameBlock = toBlock && fromBlock.index === toBlock.index;\n          var fromBlockRemoveBegin = fromBlock.offset;\n          var fromBlockRemoveEnd = toBlock && isSameBlock ? toBlock.offset : undefined;\n          fn(this._blocks[fromBlock.index], fromBlock.index, fromBlockRemoveBegin, fromBlockRemoveEnd);\n\n          if (toBlock && !isSameBlock) {\n            // process intermediate blocks\n            for (var bi = fromBlock.index + 1; bi < toBlock.index; ++bi) {\n              fn(this._blocks[bi], bi);\n            } // process last block\n\n\n            fn(this._blocks[toBlock.index], toBlock.index, 0, toBlock.offset);\n          }\n        }\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"remove\",\n      value: function remove() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n\n        var removeDetails = _get(_getPrototypeOf(MaskedPattern.prototype), \"remove\", this).call(this, fromPos, toPos);\n\n        this._forEachBlocksInRange(fromPos, toPos, function (b, _, bFromPos, bToPos) {\n          removeDetails.aggregate(b.remove(bFromPos, bToPos));\n        });\n\n        return removeDetails;\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"nearestInputPos\",\n      value: function nearestInputPos(cursorPos) {\n        var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DIRECTION.NONE;\n        // TODO refactor - extract alignblock\n        var beginBlockData = this._mapPosToBlock(cursorPos) || {\n          index: 0,\n          offset: 0\n        };\n        var beginBlockOffset = beginBlockData.offset,\n            beginBlockIndex = beginBlockData.index;\n        var beginBlock = this._blocks[beginBlockIndex];\n        if (!beginBlock) return cursorPos;\n        var beginBlockCursorPos = beginBlockOffset; // if position inside block - try to adjust it\n\n        if (beginBlockCursorPos !== 0 && beginBlockCursorPos < beginBlock.value.length) {\n          beginBlockCursorPos = beginBlock.nearestInputPos(beginBlockOffset, forceDirection(direction));\n        }\n\n        var cursorAtRight = beginBlockCursorPos === beginBlock.value.length;\n        var cursorAtLeft = beginBlockCursorPos === 0; //  cursor is INSIDE first block (not at bounds)\n\n        if (!cursorAtLeft && !cursorAtRight) return this._blockStartPos(beginBlockIndex) + beginBlockCursorPos;\n        var searchBlockIndex = cursorAtRight ? beginBlockIndex + 1 : beginBlockIndex;\n\n        if (direction === DIRECTION.NONE) {\n          // NONE direction used to calculate start input position if no chars were removed\n          // FOR NONE:\n          // -\n          // input|any\n          // ->\n          //  any|input\n          // <-\n          //  filled-input|any\n          // check if first block at left is input\n          if (searchBlockIndex > 0) {\n            var blockIndexAtLeft = searchBlockIndex - 1;\n            var blockAtLeft = this._blocks[blockIndexAtLeft];\n            var blockInputPos = blockAtLeft.nearestInputPos(0, DIRECTION.NONE); // is input\n\n            if (!blockAtLeft.value.length || blockInputPos !== blockAtLeft.value.length) {\n              return this._blockStartPos(searchBlockIndex);\n            }\n          } // ->\n\n\n          var firstInputAtRight = searchBlockIndex;\n\n          for (var bi = firstInputAtRight; bi < this._blocks.length; ++bi) {\n            var _block3 = this._blocks[bi];\n\n            var _blockInputPos = _block3.nearestInputPos(0, DIRECTION.NONE);\n\n            if (_blockInputPos !== _block3.value.length) {\n              return this._blockStartPos(bi) + _blockInputPos;\n            }\n          }\n\n          return this.value.length; // // <-\n          // for (let bi=Math.min(searchBlockIndex, this._blocks.length-1); bi >= 0; --bi) {\n          //   const block = this._blocks[bi];\n          //   const blockInputPos = block.nearestInputPos(block.value.length, DIRECTION.LEFT);\n          //   if (blockInputPos !== 0) {\n          //     return this._blockStartPos(bi) + blockInputPos;\n          //   }\n          // }\n          // return 0;\n        }\n\n        if (direction === DIRECTION.LEFT || direction === DIRECTION.FORCE_LEFT) {\n          // -\n          //  any|filled-input\n          // <-\n          //  any|first not empty is not-len-aligned\n          //  not-0-aligned|any\n          // ->\n          //  any|not-len-aligned or end\n          // check if first block at right is filled input\n          var firstFilledBlockIndexAtRight;\n\n          for (var _bi = searchBlockIndex; _bi < this._blocks.length; ++_bi) {\n            if (this._blocks[_bi].value) {\n              firstFilledBlockIndexAtRight = _bi;\n              break;\n            }\n          }\n\n          if (firstFilledBlockIndexAtRight != null) {\n            var filledBlock = this._blocks[firstFilledBlockIndexAtRight];\n\n            var _blockInputPos2 = filledBlock.nearestInputPos(0, DIRECTION.RIGHT);\n\n            if (_blockInputPos2 === 0 && filledBlock.unmaskedValue.length) {\n              // filled block is input\n              return this._blockStartPos(firstFilledBlockIndexAtRight) + _blockInputPos2;\n            }\n          } // <-\n          // find this vars\n\n\n          var firstFilledInputBlockIndex = -1;\n          var firstEmptyInputBlockIndex; // TODO consider nested empty inputs\n\n          for (var _bi2 = searchBlockIndex - 1; _bi2 >= 0; --_bi2) {\n            var _block4 = this._blocks[_bi2];\n\n            var _blockInputPos3 = _block4.nearestInputPos(_block4.value.length, DIRECTION.FORCE_LEFT);\n\n            if (firstEmptyInputBlockIndex == null && (!_block4.value || _blockInputPos3 !== 0)) {\n              firstEmptyInputBlockIndex = _bi2;\n            }\n\n            if (_blockInputPos3 !== 0) {\n              if (_blockInputPos3 !== _block4.value.length) {\n                // aligned inside block - return immediately\n                return this._blockStartPos(_bi2) + _blockInputPos3;\n              } else {\n                // found filled\n                firstFilledInputBlockIndex = _bi2;\n                break;\n              }\n            }\n          }\n\n          if (direction === DIRECTION.LEFT) {\n            // try find first empty input before start searching position only when not forced\n            for (var _bi3 = firstFilledInputBlockIndex + 1; _bi3 <= Math.min(searchBlockIndex, this._blocks.length - 1); ++_bi3) {\n              var _block5 = this._blocks[_bi3];\n\n              var _blockInputPos4 = _block5.nearestInputPos(0, DIRECTION.NONE);\n\n              var blockAlignedPos = this._blockStartPos(_bi3) + _blockInputPos4; // if block is empty and last or not lazy input\n\n\n              if ((!_block5.value.length && blockAlignedPos === this.value.length || _blockInputPos4 !== _block5.value.length) && blockAlignedPos <= cursorPos) {\n                return blockAlignedPos;\n              }\n            }\n          } // process overflow\n\n\n          if (firstFilledInputBlockIndex >= 0) {\n            return this._blockStartPos(firstFilledInputBlockIndex) + this._blocks[firstFilledInputBlockIndex].value.length;\n          } // for lazy if has aligned left inside fixed and has came to the start - use start position\n\n\n          if (direction === DIRECTION.FORCE_LEFT || this.lazy && !this.extractInput() && !isInput(this._blocks[searchBlockIndex])) {\n            return 0;\n          }\n\n          if (firstEmptyInputBlockIndex != null) {\n            return this._blockStartPos(firstEmptyInputBlockIndex);\n          } // find first input\n\n\n          for (var _bi4 = searchBlockIndex; _bi4 < this._blocks.length; ++_bi4) {\n            var _block6 = this._blocks[_bi4];\n\n            var _blockInputPos5 = _block6.nearestInputPos(0, DIRECTION.NONE); // is input\n\n\n            if (!_block6.value.length || _blockInputPos5 !== _block6.value.length) {\n              return this._blockStartPos(_bi4) + _blockInputPos5;\n            }\n          }\n\n          return 0;\n        }\n\n        if (direction === DIRECTION.RIGHT || direction === DIRECTION.FORCE_RIGHT) {\n          // ->\n          //  any|not-len-aligned and filled\n          //  any|not-len-aligned\n          // <-\n          var firstInputBlockAlignedIndex;\n          var firstInputBlockAlignedPos;\n\n          for (var _bi5 = searchBlockIndex; _bi5 < this._blocks.length; ++_bi5) {\n            var _block7 = this._blocks[_bi5];\n\n            var _blockInputPos6 = _block7.nearestInputPos(0, DIRECTION.NONE);\n\n            if (_blockInputPos6 !== _block7.value.length) {\n              firstInputBlockAlignedPos = this._blockStartPos(_bi5) + _blockInputPos6;\n              firstInputBlockAlignedIndex = _bi5;\n              break;\n            }\n          }\n\n          if (firstInputBlockAlignedIndex != null && firstInputBlockAlignedPos != null) {\n            for (var _bi6 = firstInputBlockAlignedIndex; _bi6 < this._blocks.length; ++_bi6) {\n              var _block8 = this._blocks[_bi6];\n\n              var _blockInputPos7 = _block8.nearestInputPos(0, DIRECTION.FORCE_RIGHT);\n\n              if (_blockInputPos7 !== _block8.value.length) {\n                return this._blockStartPos(_bi6) + _blockInputPos7;\n              }\n            }\n\n            return direction === DIRECTION.FORCE_RIGHT ? this.value.length : firstInputBlockAlignedPos;\n          }\n\n          for (var _bi7 = Math.min(searchBlockIndex, this._blocks.length - 1); _bi7 >= 0; --_bi7) {\n            var _block9 = this._blocks[_bi7];\n\n            var _blockInputPos8 = _block9.nearestInputPos(_block9.value.length, DIRECTION.LEFT);\n\n            if (_blockInputPos8 !== 0) {\n              var alignedPos = this._blockStartPos(_bi7) + _blockInputPos8;\n\n              if (alignedPos >= cursorPos) return alignedPos;\n              break;\n            }\n          }\n        }\n\n        return cursorPos;\n      }\n      /** Get block by name */\n\n    }, {\n      key: \"maskedBlock\",\n      value: function maskedBlock(name) {\n        return this.maskedBlocks(name)[0];\n      }\n      /** Get all blocks by name */\n\n    }, {\n      key: \"maskedBlocks\",\n      value: function maskedBlocks(name) {\n        var _this4 = this;\n\n        var indices = this._maskedBlocks[name];\n        if (!indices) return [];\n        return indices.map(function (gi) {\n          return _this4._blocks[gi];\n        });\n      }\n    }, {\n      key: \"state\",\n      get: function get$$1() {\n        return _objectSpread({}, _get(_getPrototypeOf(MaskedPattern.prototype), \"state\", this), {\n          _blocks: this._blocks.map(function (b) {\n            return b.state;\n          })\n        });\n      },\n      set: function set$$1(state) {\n        var _blocks = state._blocks,\n            maskedState = _objectWithoutProperties(state, [\"_blocks\"]);\n\n        this._blocks.forEach(function (b, bi) {\n          return b.state = _blocks[bi];\n        });\n\n        _set(_getPrototypeOf(MaskedPattern.prototype), \"state\", maskedState, this, true);\n      }\n    }, {\n      key: \"isComplete\",\n      get: function get$$1() {\n        return this._blocks.every(function (b) {\n          return b.isComplete;\n        });\n      }\n    }, {\n      key: \"unmaskedValue\",\n      get: function get$$1() {\n        return this._blocks.reduce(function (str, b) {\n          return str += b.unmaskedValue;\n        }, '');\n      },\n      set: function set$$1(unmaskedValue) {\n        _set(_getPrototypeOf(MaskedPattern.prototype), \"unmaskedValue\", unmaskedValue, this, true);\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"value\",\n      get: function get$$1() {\n        // TODO return _value when not in change?\n        return this._blocks.reduce(function (str, b) {\n          return str += b.value;\n        }, '');\n      },\n      set: function set$$1(value) {\n        _set(_getPrototypeOf(MaskedPattern.prototype), \"value\", value, this, true);\n      }\n    }]);\n\n    return MaskedPattern;\n  }(Masked);\n  MaskedPattern.DEFAULTS = {\n    lazy: true,\n    placeholderChar: '_'\n  };\n  MaskedPattern.STOP_CHAR = '`';\n  MaskedPattern.ESCAPE_CHAR = '\\\\';\n  MaskedPattern.InputDefinition = PatternInputDefinition;\n  MaskedPattern.FixedDefinition = PatternFixedDefinition;\n\n  function isInput(block) {\n    if (!block) return false;\n    var value = block.value;\n    return !value || block.nearestInputPos(0, DIRECTION.NONE) !== value.length;\n  }\n\n  /** Pattern which accepts ranges */\n\n  var MaskedRange =\n  /*#__PURE__*/\n  function (_MaskedPattern) {\n    _inherits(MaskedRange, _MaskedPattern);\n\n    function MaskedRange() {\n      _classCallCheck(this, MaskedRange);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(MaskedRange).apply(this, arguments));\n    }\n\n    _createClass(MaskedRange, [{\n      key: \"_update\",\n\n      /**\r\n        @override\r\n      */\n      value: function _update(opts) {\n        // TODO type\n        var maxLength = String(opts.to).length;\n        if (opts.maxLength != null) maxLength = Math.max(maxLength, opts.maxLength);\n        opts.maxLength = maxLength;\n        var toStr = String(opts.to).padStart(maxLength, '0');\n        var fromStr = String(opts.from).padStart(maxLength, '0');\n        var sameCharsCount = 0;\n\n        while (sameCharsCount < toStr.length && toStr[sameCharsCount] === fromStr[sameCharsCount]) {\n          ++sameCharsCount;\n        }\n\n        opts.mask = toStr.slice(0, sameCharsCount).replace(/0/g, '\\\\0') + '0'.repeat(maxLength - sameCharsCount);\n\n        _get(_getPrototypeOf(MaskedRange.prototype), \"_update\", this).call(this, opts);\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"doValidate\",\n\n      /**\r\n        @override\r\n      */\n      value: function doValidate() {\n        var _get2;\n\n        var str = this.value;\n        var minstr = '';\n        var maxstr = '';\n\n        var _ref = str.match(/^(\\D*)(\\d*)(\\D*)/) || [],\n            _ref2 = _slicedToArray(_ref, 3),\n            placeholder = _ref2[1],\n            num = _ref2[2];\n\n        if (num) {\n          minstr = '0'.repeat(placeholder.length) + num;\n          maxstr = '9'.repeat(placeholder.length) + num;\n        }\n\n        var firstNonZero = str.search(/[^0]/);\n        if (firstNonZero === -1 && str.length <= this._matchFrom) return true;\n        minstr = minstr.padEnd(this.maxLength, '0');\n        maxstr = maxstr.padEnd(this.maxLength, '9');\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return this.from <= Number(maxstr) && Number(minstr) <= this.to && (_get2 = _get(_getPrototypeOf(MaskedRange.prototype), \"doValidate\", this)).call.apply(_get2, [this].concat(args));\n      }\n    }, {\n      key: \"_matchFrom\",\n\n      /**\r\n        Optionally sets max length of pattern.\r\n        Used when pattern length is longer then `to` param length. Pads zeros at start in this case.\r\n      */\n\n      /** Min bound */\n\n      /** Max bound */\n      get: function get$$1() {\n        return this.maxLength - String(this.from).length;\n      }\n    }, {\n      key: \"isComplete\",\n      get: function get$$1() {\n        return _get(_getPrototypeOf(MaskedRange.prototype), \"isComplete\", this) && Boolean(this.value);\n      }\n    }]);\n\n    return MaskedRange;\n  }(MaskedPattern);\n\n  /** Date mask */\n\n  var MaskedDate =\n  /*#__PURE__*/\n  function (_MaskedPattern) {\n    _inherits(MaskedDate, _MaskedPattern);\n\n    /** Parse string to Date */\n\n    /** Format Date to string */\n\n    /** Pattern mask for date according to {@link MaskedDate#format} */\n\n    /** Start date */\n\n    /** End date */\n\n    /**\r\n      @param {Object} opts\r\n    */\n    function MaskedDate(opts) {\n      _classCallCheck(this, MaskedDate);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(MaskedDate).call(this, _objectSpread({}, MaskedDate.DEFAULTS, opts)));\n    }\n    /**\r\n      @override\r\n    */\n\n\n    _createClass(MaskedDate, [{\n      key: \"_update\",\n      value: function _update(opts) {\n        if (opts.mask === Date) delete opts.mask;\n\n        if (opts.pattern) {\n          opts.mask = opts.pattern;\n          delete opts.pattern;\n        }\n\n        var blocks = opts.blocks;\n        opts.blocks = _extends({}, MaskedDate.GET_DEFAULT_BLOCKS()); // adjust year block\n\n        if (opts.min) opts.blocks.Y.from = opts.min.getFullYear();\n        if (opts.max) opts.blocks.Y.to = opts.max.getFullYear();\n\n        if (opts.min && opts.max && opts.blocks.Y.from === opts.blocks.Y.to) {\n          opts.blocks.m.from = opts.min.getMonth() + 1;\n          opts.blocks.m.to = opts.max.getMonth() + 1;\n\n          if (opts.blocks.m.from === opts.blocks.m.to) {\n            opts.blocks.d.from = opts.min.getDate();\n            opts.blocks.d.to = opts.max.getDate();\n          }\n        }\n\n        _extends(opts.blocks, blocks);\n\n        _get(_getPrototypeOf(MaskedDate.prototype), \"_update\", this).call(this, opts);\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"doValidate\",\n      value: function doValidate() {\n        var _get2;\n\n        var date = this.date;\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return (_get2 = _get(_getPrototypeOf(MaskedDate.prototype), \"doValidate\", this)).call.apply(_get2, [this].concat(args)) && (!this.isComplete || this.isDateExist(this.value) && date != null && (this.min == null || this.min <= date) && (this.max == null || date <= this.max));\n      }\n      /** Checks if date is exists */\n\n    }, {\n      key: \"isDateExist\",\n      value: function isDateExist(str) {\n        return this.format(this.parse(str)) === str;\n      }\n      /** Parsed Date */\n\n    }, {\n      key: \"date\",\n      get: function get$$1() {\n        return this.isComplete ? this.parse(this.value) : null;\n      },\n      set: function set(date) {\n        this.value = this.format(date);\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"typedValue\",\n      get: function get$$1() {\n        return this.date;\n      },\n      set: function set(value) {\n        this.date = value;\n      }\n    }]);\n\n    return MaskedDate;\n  }(MaskedPattern);\n  MaskedDate.DEFAULTS = {\n    pattern: 'd{.}`m{.}`Y',\n    format: function format(date) {\n      var day = String(date.getDate()).padStart(2, '0');\n      var month = String(date.getMonth() + 1).padStart(2, '0');\n      var year = date.getFullYear();\n      return [day, month, year].join('.');\n    },\n    parse: function parse(str) {\n      var _str$split = str.split('.'),\n          _str$split2 = _slicedToArray(_str$split, 3),\n          day = _str$split2[0],\n          month = _str$split2[1],\n          year = _str$split2[2];\n\n      return new Date(year, month - 1, day);\n    }\n  };\n\n  MaskedDate.GET_DEFAULT_BLOCKS = function () {\n    return {\n      d: {\n        mask: MaskedRange,\n        from: 1,\n        to: 31,\n        maxLength: 2\n      },\n      m: {\n        mask: MaskedRange,\n        from: 1,\n        to: 12,\n        maxLength: 2\n      },\n      Y: {\n        mask: MaskedRange,\n        from: 1900,\n        to: 9999\n      }\n    };\n  };\n\n  /**\r\n    Generic element API to use with mask\r\n    @interface\r\n  */\n  var MaskElement =\n  /*#__PURE__*/\n  function () {\n    function MaskElement() {\n      _classCallCheck(this, MaskElement);\n    }\n\n    _createClass(MaskElement, [{\n      key: \"select\",\n\n      /** Safely sets element selection */\n      value: function select(start, end) {\n        if (start == null || end == null || start === this.selectionStart && end === this.selectionEnd) return;\n\n        try {\n          this._unsafeSelect(start, end);\n        } catch (e) {}\n      }\n      /** Should be overriden in subclasses */\n\n    }, {\n      key: \"_unsafeSelect\",\n      value: function _unsafeSelect(start, end) {}\n      /** Should be overriden in subclasses */\n\n    }, {\n      key: \"bindEvents\",\n\n      /** Should be overriden in subclasses */\n      value: function bindEvents(handlers) {}\n      /** Should be overriden in subclasses */\n\n    }, {\n      key: \"unbindEvents\",\n      value: function unbindEvents() {}\n    }, {\n      key: \"selectionStart\",\n\n      /** */\n\n      /** */\n\n      /** */\n\n      /** Safely returns selection start */\n      get: function get() {\n        var start;\n\n        try {\n          start = this._unsafeSelectionStart;\n        } catch (e) {}\n\n        return start != null ? start : this.value.length;\n      }\n      /** Safely returns selection end */\n\n    }, {\n      key: \"selectionEnd\",\n      get: function get() {\n        var end;\n\n        try {\n          end = this._unsafeSelectionEnd;\n        } catch (e) {}\n\n        return end != null ? end : this.value.length;\n      }\n    }, {\n      key: \"isActive\",\n      get: function get() {\n        return false;\n      }\n    }]);\n\n    return MaskElement;\n  }();\n\n  /** Bridge between HTMLElement and {@link Masked} */\n\n  var HTMLMaskElement =\n  /*#__PURE__*/\n  function (_MaskElement) {\n    _inherits(HTMLMaskElement, _MaskElement);\n\n    /** Mapping between HTMLElement events and mask internal events */\n\n    /** HTMLElement to use mask on */\n\n    /**\r\n      @param {HTMLInputElement|HTMLTextAreaElement} input\r\n    */\n    function HTMLMaskElement(input) {\n      var _this;\n\n      _classCallCheck(this, HTMLMaskElement);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLMaskElement).call(this));\n      _this.input = input;\n      _this._handlers = {};\n      return _this;\n    }\n    /**\r\n      Is element in focus\r\n      @readonly\r\n    */\n\n\n    _createClass(HTMLMaskElement, [{\n      key: \"_unsafeSelect\",\n\n      /**\r\n        Sets HTMLElement selection\r\n        @override\r\n      */\n      value: function _unsafeSelect(start, end) {\n        this.input.setSelectionRange(start, end);\n      }\n      /**\r\n        HTMLElement value\r\n        @override\r\n      */\n\n    }, {\n      key: \"bindEvents\",\n\n      /**\r\n        Binds HTMLElement events to mask internal events\r\n        @override\r\n      */\n      value: function bindEvents(handlers) {\n        var _this2 = this;\n\n        Object.keys(handlers).forEach(function (event) {\n          return _this2._toggleEventHandler(HTMLMaskElement.EVENTS_MAP[event], handlers[event]);\n        });\n      }\n      /**\r\n        Unbinds HTMLElement events to mask internal events\r\n        @override\r\n      */\n\n    }, {\n      key: \"unbindEvents\",\n      value: function unbindEvents() {\n        var _this3 = this;\n\n        Object.keys(this._handlers).forEach(function (event) {\n          return _this3._toggleEventHandler(event);\n        });\n      }\n    }, {\n      key: \"_toggleEventHandler\",\n      value: function _toggleEventHandler(event, handler) {\n        if (this._handlers[event]) {\n          this.input.removeEventListener(event, this._handlers[event]);\n          delete this._handlers[event];\n        }\n\n        if (handler) {\n          this.input.addEventListener(event, handler);\n          this._handlers[event] = handler;\n        }\n      }\n    }, {\n      key: \"isActive\",\n      get: function get() {\n        return this.input === document.activeElement;\n      }\n      /**\r\n        Returns HTMLElement selection start\r\n        @override\r\n      */\n\n    }, {\n      key: \"_unsafeSelectionStart\",\n      get: function get() {\n        return this.input.selectionStart;\n      }\n      /**\r\n        Returns HTMLElement selection end\r\n        @override\r\n      */\n\n    }, {\n      key: \"_unsafeSelectionEnd\",\n      get: function get() {\n        return this.input.selectionEnd;\n      }\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this.input.value;\n      },\n      set: function set(value) {\n        this.input.value = value;\n      }\n    }]);\n\n    return HTMLMaskElement;\n  }(MaskElement);\n  HTMLMaskElement.EVENTS_MAP = {\n    selectionChange: 'keydown',\n    input: 'input',\n    drop: 'drop',\n    click: 'click',\n    focus: 'focus',\n    commit: 'change'\n  };\n\n  /** Listens to element events and controls changes between element and {@link Masked} */\n\n  var InputMask =\n  /*#__PURE__*/\n  function () {\n    /**\r\n      View element\r\n      @readonly\r\n    */\n\n    /**\r\n      Internal {@link Masked} model\r\n      @readonly\r\n    */\n\n    /**\r\n      @param {MaskElement|HTMLInputElement|HTMLTextAreaElement} el\r\n      @param {Object} opts\r\n    */\n    function InputMask(el, opts) {\n      _classCallCheck(this, InputMask);\n\n      this.el = el instanceof MaskElement ? el : new HTMLMaskElement(el);\n      this.masked = createMask(opts);\n      this._listeners = {};\n      this._value = '';\n      this._unmaskedValue = '';\n      this._saveSelection = this._saveSelection.bind(this);\n      this._onInput = this._onInput.bind(this);\n      this._onChange = this._onChange.bind(this);\n      this._onDrop = this._onDrop.bind(this);\n      this.alignCursor = this.alignCursor.bind(this);\n      this.alignCursorFriendly = this.alignCursorFriendly.bind(this);\n\n      this._bindEvents(); // refresh\n\n\n      this.updateValue();\n\n      this._onChange();\n    }\n    /** Read or update mask */\n\n\n    _createClass(InputMask, [{\n      key: \"_bindEvents\",\n\n      /**\r\n        Starts listening to element events\r\n        @protected\r\n      */\n      value: function _bindEvents() {\n        this.el.bindEvents({\n          selectionChange: this._saveSelection,\n          input: this._onInput,\n          drop: this._onDrop,\n          click: this.alignCursorFriendly,\n          focus: this.alignCursorFriendly,\n          commit: this._onChange\n        });\n      }\n      /**\r\n        Stops listening to element events\r\n        @protected\r\n       */\n\n    }, {\n      key: \"_unbindEvents\",\n      value: function _unbindEvents() {\n        this.el.unbindEvents();\n      }\n      /**\r\n        Fires custom event\r\n        @protected\r\n       */\n\n    }, {\n      key: \"_fireEvent\",\n      value: function _fireEvent(ev) {\n        var listeners = this._listeners[ev];\n        if (!listeners) return;\n        listeners.forEach(function (l) {\n          return l();\n        });\n      }\n      /**\r\n        Current selection start\r\n        @readonly\r\n      */\n\n    }, {\n      key: \"_saveSelection\",\n\n      /**\r\n        Stores current selection\r\n        @protected\r\n      */\n      value: function _saveSelection()\n      /* ev */\n      {\n        if (this.value !== this.el.value) {\n          console.warn('Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly.'); // eslint-disable-line no-console\n        }\n\n        this._selection = {\n          start: this.selectionStart,\n          end: this.cursorPos\n        };\n      }\n      /** Syncronizes model value from view */\n\n    }, {\n      key: \"updateValue\",\n      value: function updateValue() {\n        this.masked.value = this.el.value;\n      }\n      /** Syncronizes view from model value, fires change events */\n\n    }, {\n      key: \"updateControl\",\n      value: function updateControl() {\n        var newUnmaskedValue = this.masked.unmaskedValue;\n        var newValue = this.masked.value;\n        var isChanged = this.unmaskedValue !== newUnmaskedValue || this.value !== newValue;\n        this._unmaskedValue = newUnmaskedValue;\n        this._value = newValue;\n        if (this.el.value !== newValue) this.el.value = newValue;\n        if (isChanged) this._fireChangeEvents();\n      }\n      /** Updates options with deep equal check, recreates @{link Masked} model if mask type changes */\n\n    }, {\n      key: \"updateOptions\",\n      value: function updateOptions(opts) {\n        opts = _objectSpread({}, opts);\n        this.mask = opts.mask;\n        delete opts.mask; // check if changed\n\n        if (!objectIncludes(this.masked, opts)) {\n          this.masked.updateOptions(opts);\n        }\n\n        this.updateControl();\n      }\n      /** Updates cursor */\n\n    }, {\n      key: \"updateCursor\",\n      value: function updateCursor(cursorPos) {\n        if (cursorPos == null) return;\n        this.cursorPos = cursorPos; // also queue change cursor for mobile browsers\n\n        this._delayUpdateCursor(cursorPos);\n      }\n      /**\r\n        Delays cursor update to support mobile browsers\r\n        @private\r\n      */\n\n    }, {\n      key: \"_delayUpdateCursor\",\n      value: function _delayUpdateCursor(cursorPos) {\n        var _this = this;\n\n        this._abortUpdateCursor();\n\n        this._changingCursorPos = cursorPos;\n        this._cursorChanging = setTimeout(function () {\n          if (!_this.el) return; // if was destroyed\n\n          _this.cursorPos = _this._changingCursorPos;\n\n          _this._abortUpdateCursor();\n        }, 10);\n      }\n      /**\r\n        Fires custom events\r\n        @protected\r\n      */\n\n    }, {\n      key: \"_fireChangeEvents\",\n      value: function _fireChangeEvents() {\n        this._fireEvent('accept');\n\n        if (this.masked.isComplete) this._fireEvent('complete');\n      }\n      /**\r\n        Aborts delayed cursor update\r\n        @private\r\n      */\n\n    }, {\n      key: \"_abortUpdateCursor\",\n      value: function _abortUpdateCursor() {\n        if (this._cursorChanging) {\n          clearTimeout(this._cursorChanging);\n          delete this._cursorChanging;\n        }\n      }\n      /** Aligns cursor to nearest available position */\n\n    }, {\n      key: \"alignCursor\",\n      value: function alignCursor() {\n        this.cursorPos = this.masked.nearestInputPos(this.cursorPos, DIRECTION.LEFT);\n      }\n      /** Aligns cursor only if selection is empty */\n\n    }, {\n      key: \"alignCursorFriendly\",\n      value: function alignCursorFriendly() {\n        if (this.selectionStart !== this.cursorPos) return;\n        this.alignCursor();\n      }\n      /** Adds listener on custom event */\n\n    }, {\n      key: \"on\",\n      value: function on(ev, handler) {\n        if (!this._listeners[ev]) this._listeners[ev] = [];\n\n        this._listeners[ev].push(handler);\n\n        return this;\n      }\n      /** Removes custom event listener */\n\n    }, {\n      key: \"off\",\n      value: function off(ev, handler) {\n        if (!this._listeners[ev]) return;\n\n        if (!handler) {\n          delete this._listeners[ev];\n          return;\n        }\n\n        var hIndex = this._listeners[ev].indexOf(handler);\n\n        if (hIndex >= 0) this._listeners[ev].splice(hIndex, 1);\n        return this;\n      }\n      /** Handles view input event */\n\n    }, {\n      key: \"_onInput\",\n      value: function _onInput() {\n        this._abortUpdateCursor(); // fix strange IE behavior\n\n\n        if (!this._selection) return this.updateValue();\n        var details = new ActionDetails( // new state\n        this.el.value, this.cursorPos, // old state\n        this.value, this._selection);\n        var offset = this.masked.splice(details.startChangePos, details.removed.length, details.inserted, details.removeDirection).offset;\n        var cursorPos = this.masked.nearestInputPos(details.startChangePos + offset, details.removeDirection);\n        this.updateControl();\n        this.updateCursor(cursorPos);\n      }\n      /** Handles view change event and commits model value */\n\n    }, {\n      key: \"_onChange\",\n      value: function _onChange() {\n        if (this.value !== this.el.value) {\n          this.updateValue();\n        }\n\n        this.masked.doCommit();\n        this.updateControl();\n      }\n      /** Handles view drop event, prevents by default */\n\n    }, {\n      key: \"_onDrop\",\n      value: function _onDrop(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n      /** Unbind view events and removes element reference */\n\n    }, {\n      key: \"destroy\",\n      value: function destroy() {\n        this._unbindEvents(); // $FlowFixMe why not do so?\n\n\n        this._listeners.length = 0;\n        delete this.el;\n      }\n    }, {\n      key: \"mask\",\n      get: function get() {\n        return this.masked.mask;\n      },\n      set: function set(mask) {\n        if (mask == null || mask === this.masked.mask || mask === Date && this.masked instanceof MaskedDate) return;\n\n        if (this.masked.constructor === maskedClass(mask)) {\n          this.masked.updateOptions({\n            mask: mask\n          });\n          return;\n        }\n\n        var masked = createMask({\n          mask: mask\n        });\n        masked.unmaskedValue = this.masked.unmaskedValue;\n        this.masked = masked;\n      }\n      /** Raw value */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._value;\n      },\n      set: function set(str) {\n        this.masked.value = str;\n        this.updateControl();\n        this.alignCursor();\n      }\n      /** Unmasked value */\n\n    }, {\n      key: \"unmaskedValue\",\n      get: function get() {\n        return this._unmaskedValue;\n      },\n      set: function set(str) {\n        this.masked.unmaskedValue = str;\n        this.updateControl();\n        this.alignCursor();\n      }\n      /** Typed unmasked value */\n\n    }, {\n      key: \"typedValue\",\n      get: function get() {\n        return this.masked.typedValue;\n      },\n      set: function set(val) {\n        this.masked.typedValue = val;\n        this.updateControl();\n        this.alignCursor();\n      }\n    }, {\n      key: \"selectionStart\",\n      get: function get() {\n        return this._cursorChanging ? this._changingCursorPos : this.el.selectionStart;\n      }\n      /** Current cursor position */\n\n    }, {\n      key: \"cursorPos\",\n      get: function get() {\n        return this._cursorChanging ? this._changingCursorPos : this.el.selectionEnd;\n      },\n      set: function set(pos) {\n        if (!this.el.isActive) return;\n        this.el.select(pos, pos);\n\n        this._saveSelection();\n      }\n    }]);\n\n    return InputMask;\n  }();\n\n  /** Pattern which validates enum values */\n\n  var MaskedEnum =\n  /*#__PURE__*/\n  function (_MaskedPattern) {\n    _inherits(MaskedEnum, _MaskedPattern);\n\n    function MaskedEnum() {\n      _classCallCheck(this, MaskedEnum);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(MaskedEnum).apply(this, arguments));\n    }\n\n    _createClass(MaskedEnum, [{\n      key: \"_update\",\n\n      /**\r\n        @override\r\n        @param {Object} opts\r\n      */\n      value: function _update(opts) {\n        // TODO type\n        if (opts.enum) opts.mask = '*'.repeat(opts.enum[0].length);\n\n        _get(_getPrototypeOf(MaskedEnum.prototype), \"_update\", this).call(this, opts);\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"doValidate\",\n      value: function doValidate() {\n        var _this = this,\n            _get2;\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return this.enum.some(function (e) {\n          return e.indexOf(_this.unmaskedValue) >= 0;\n        }) && (_get2 = _get(_getPrototypeOf(MaskedEnum.prototype), \"doValidate\", this)).call.apply(_get2, [this].concat(args));\n      }\n    }]);\n\n    return MaskedEnum;\n  }(MaskedPattern);\n\n  /**\r\n    Number mask\r\n    @param {Object} opts\r\n    @param {string} opts.radix - Single char\r\n    @param {string} opts.thousandsSeparator - Single char\r\n    @param {Array<string>} opts.mapToRadix - Array of single chars\r\n    @param {number} opts.min\r\n    @param {number} opts.max\r\n    @param {number} opts.scale - Digits after point\r\n    @param {boolean} opts.signed - Allow negative\r\n    @param {boolean} opts.normalizeZeros - Flag to remove leading and trailing zeros in the end of editing\r\n    @param {boolean} opts.padFractionalZeros - Flag to pad trailing zeros after point in the end of editing\r\n  */\n  var MaskedNumber =\n  /*#__PURE__*/\n  function (_Masked) {\n    _inherits(MaskedNumber, _Masked);\n\n    /** Single char */\n\n    /** Single char */\n\n    /** Array of single chars */\n\n    /** */\n\n    /** */\n\n    /** Digits after point */\n\n    /** */\n\n    /** Flag to remove leading and trailing zeros in the end of editing */\n\n    /** Flag to pad trailing zeros after point in the end of editing */\n    function MaskedNumber(opts) {\n      _classCallCheck(this, MaskedNumber);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(MaskedNumber).call(this, _objectSpread({}, MaskedNumber.DEFAULTS, opts)));\n    }\n    /**\r\n      @override\r\n    */\n\n\n    _createClass(MaskedNumber, [{\n      key: \"_update\",\n      value: function _update(opts) {\n        _get(_getPrototypeOf(MaskedNumber.prototype), \"_update\", this).call(this, opts);\n\n        this._updateRegExps();\n      }\n      /** */\n\n    }, {\n      key: \"_updateRegExps\",\n      value: function _updateRegExps() {\n        // use different regexp to process user input (more strict, input suffix) and tail shifting\n        var start = '^';\n        var midInput = '';\n        var mid = '';\n\n        if (this.allowNegative) {\n          midInput += '([+|\\\\-]?|([+|\\\\-]?(0|([1-9]+\\\\d*))))';\n          mid += '[+|\\\\-]?';\n        } else {\n          midInput += '(0|([1-9]+\\\\d*))';\n        }\n\n        mid += '\\\\d*';\n        var end = (this.scale ? '(' + this.radix + '\\\\d{0,' + this.scale + '})?' : '') + '$';\n        this._numberRegExpInput = new RegExp(start + midInput + end);\n        this._numberRegExp = new RegExp(start + mid + end);\n        this._mapToRadixRegExp = new RegExp('[' + this.mapToRadix.map(escapeRegExp).join('') + ']', 'g');\n        this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"extractTail\",\n      value: function extractTail() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n\n        var tail = _get(_getPrototypeOf(MaskedNumber.prototype), \"extractTail\", this).call(this, fromPos, toPos); // $FlowFixMe no ideas\n\n\n        return _objectSpread({}, tail, {\n          value: this._removeThousandsSeparators(tail.value)\n        });\n      }\n      /** */\n\n    }, {\n      key: \"_removeThousandsSeparators\",\n      value: function _removeThousandsSeparators(value) {\n        return value.replace(this._thousandsSeparatorRegExp, '');\n      }\n      /** */\n\n    }, {\n      key: \"_insertThousandsSeparators\",\n      value: function _insertThousandsSeparators(value) {\n        // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n        var parts = value.split(this.radix);\n        parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\n        return parts.join(this.radix);\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"doPrepare\",\n      value: function doPrepare(str) {\n        var _get2;\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        return (_get2 = _get(_getPrototypeOf(MaskedNumber.prototype), \"doPrepare\", this)).call.apply(_get2, [this, this._removeThousandsSeparators(str.replace(this._mapToRadixRegExp, this.radix))].concat(args));\n      }\n    }, {\n      key: \"_separatorsCount\",\n      value: function _separatorsCount() {\n        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._value;\n\n        var rawValueLength = this._removeThousandsSeparators(value).length;\n\n        var valueWithSeparatorsLength = rawValueLength;\n\n        for (var pos = 0; pos <= valueWithSeparatorsLength; ++pos) {\n          if (this._value[pos] === this.thousandsSeparator) ++valueWithSeparatorsLength;\n        }\n\n        return valueWithSeparatorsLength - rawValueLength;\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"_appendCharRaw\",\n      value: function _appendCharRaw(ch) {\n        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        if (!this.thousandsSeparator) return _get(_getPrototypeOf(MaskedNumber.prototype), \"_appendCharRaw\", this).call(this, ch, flags);\n\n        var previousBeforeTailSeparatorsCount = this._separatorsCount(flags.tail && this._beforeTailState ? this._beforeTailState._value : this._value);\n\n        this._value = this._removeThousandsSeparators(this.value);\n\n        var appendDetails = _get(_getPrototypeOf(MaskedNumber.prototype), \"_appendCharRaw\", this).call(this, ch, flags);\n\n        this._value = this._insertThousandsSeparators(this._value);\n\n        var beforeTailSeparatorsCount = this._separatorsCount(flags.tail && this._beforeTailState ? this._beforeTailState._value : this._value);\n\n        appendDetails.tailShift += beforeTailSeparatorsCount - previousBeforeTailSeparatorsCount;\n        return appendDetails;\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"remove\",\n      value: function remove() {\n        var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n        var valueBeforePos = this.value.slice(0, fromPos);\n        var valueAfterPos = this.value.slice(toPos);\n\n        var previousBeforeTailSeparatorsCount = this._separatorsCount(valueBeforePos);\n\n        this._value = this._insertThousandsSeparators(this._removeThousandsSeparators(valueBeforePos + valueAfterPos));\n\n        var beforeTailSeparatorsCount = this._separatorsCount(valueBeforePos);\n\n        return new ChangeDetails({\n          tailShift: beforeTailSeparatorsCount - previousBeforeTailSeparatorsCount\n        });\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"nearestInputPos\",\n      value: function nearestInputPos(cursorPos, direction) {\n        if (!direction) return cursorPos;\n        var nextPos = indexInDirection(cursorPos, direction);\n        if (this.value[nextPos] === this.thousandsSeparator) cursorPos = posInDirection(cursorPos, direction);\n        return cursorPos;\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"doValidate\",\n      value: function doValidate(flags) {\n        var regexp = flags.input ? this._numberRegExpInput : this._numberRegExp; // validate as string\n\n        var valid = regexp.test(this._removeThousandsSeparators(this.value));\n\n        if (valid) {\n          // validate as number\n          var number = this.number;\n          valid = valid && !isNaN(number) && ( // check min bound for negative values\n          this.min == null || this.min >= 0 || this.min <= this.number) && ( // check max bound for positive values\n          this.max == null || this.max <= 0 || this.number <= this.max);\n        }\n\n        return valid && _get(_getPrototypeOf(MaskedNumber.prototype), \"doValidate\", this).call(this, flags);\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"doCommit\",\n      value: function doCommit() {\n        var number = this.number;\n        var validnum = number; // check bounds\n\n        if (this.min != null) validnum = Math.max(validnum, this.min);\n        if (this.max != null) validnum = Math.min(validnum, this.max);\n        if (validnum !== number) this.unmaskedValue = String(validnum);\n        var formatted = this.value;\n        if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);\n        if (this.padFractionalZeros) formatted = this._padFractionalZeros(formatted);\n        this._value = this._insertThousandsSeparators(formatted);\n\n        _get(_getPrototypeOf(MaskedNumber.prototype), \"doCommit\", this).call(this);\n      }\n      /** */\n\n    }, {\n      key: \"_normalizeZeros\",\n      value: function _normalizeZeros(value) {\n        var parts = this._removeThousandsSeparators(value).split(this.radix); // remove leading zeros\n\n\n        parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, function (match, sign, zeros, num) {\n          return sign + num;\n        }); // add leading zero\n\n        if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\n\n        if (parts.length > 1) {\n          parts[1] = parts[1].replace(/0*$/, ''); // remove trailing zeros\n\n          if (!parts[1].length) parts.length = 1; // remove fractional\n        }\n\n        return this._insertThousandsSeparators(parts.join(this.radix));\n      }\n      /** */\n\n    }, {\n      key: \"_padFractionalZeros\",\n      value: function _padFractionalZeros(value) {\n        if (!value) return value;\n        var parts = value.split(this.radix);\n        if (parts.length < 2) parts.push('');\n        parts[1] = parts[1].padEnd(this.scale, '0');\n        return parts.join(this.radix);\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"unmaskedValue\",\n      get: function get$$1() {\n        return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix, '.');\n      },\n      set: function set$$1(unmaskedValue) {\n        _set(_getPrototypeOf(MaskedNumber.prototype), \"unmaskedValue\", unmaskedValue.replace('.', this.radix), this, true);\n      }\n      /** Parsed Number */\n\n    }, {\n      key: \"number\",\n      get: function get$$1() {\n        return Number(this.unmaskedValue);\n      },\n      set: function set$$1(number) {\n        this.unmaskedValue = String(number);\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"typedValue\",\n      get: function get$$1() {\n        return this.number;\n      },\n      set: function set$$1(value) {\n        this.number = value;\n      }\n      /**\r\n        Is negative allowed\r\n        @readonly\r\n      */\n\n    }, {\n      key: \"allowNegative\",\n      get: function get$$1() {\n        return this.signed || this.min != null && this.min < 0 || this.max != null && this.max < 0;\n      }\n    }]);\n\n    return MaskedNumber;\n  }(Masked);\n  MaskedNumber.DEFAULTS = {\n    radix: ',',\n    thousandsSeparator: '',\n    mapToRadix: ['.'],\n    scale: 2,\n    signed: false,\n    normalizeZeros: true,\n    padFractionalZeros: false\n  };\n\n  /** Masking by RegExp */\n\n  var MaskedRegExp =\n  /*#__PURE__*/\n  function (_Masked) {\n    _inherits(MaskedRegExp, _Masked);\n\n    function MaskedRegExp() {\n      _classCallCheck(this, MaskedRegExp);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(MaskedRegExp).apply(this, arguments));\n    }\n\n    _createClass(MaskedRegExp, [{\n      key: \"_update\",\n\n      /**\r\n        @override\r\n        @param {Object} opts\r\n      */\n      value: function _update(opts) {\n        opts.validate = function (value) {\n          return value.search(opts.mask) >= 0;\n        };\n\n        _get(_getPrototypeOf(MaskedRegExp.prototype), \"_update\", this).call(this, opts);\n      }\n    }]);\n\n    return MaskedRegExp;\n  }(Masked);\n\n  /** Masking by custom Function */\n\n  var MaskedFunction =\n  /*#__PURE__*/\n  function (_Masked) {\n    _inherits(MaskedFunction, _Masked);\n\n    function MaskedFunction() {\n      _classCallCheck(this, MaskedFunction);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(MaskedFunction).apply(this, arguments));\n    }\n\n    _createClass(MaskedFunction, [{\n      key: \"_update\",\n\n      /**\r\n        @override\r\n        @param {Object} opts\r\n      */\n      value: function _update(opts) {\n        opts.validate = opts.mask;\n\n        _get(_getPrototypeOf(MaskedFunction.prototype), \"_update\", this).call(this, opts);\n      }\n    }]);\n\n    return MaskedFunction;\n  }(Masked);\n\n  /** Dynamic mask for choosing apropriate mask in run-time */\n  var MaskedDynamic =\n  /*#__PURE__*/\n  function (_Masked) {\n    _inherits(MaskedDynamic, _Masked);\n\n    /** Currently chosen mask */\n\n    /** Compliled {@link Masked} options */\n\n    /** Chooses {@link Masked} depending on input value */\n\n    /**\r\n      @param {Object} opts\r\n    */\n    function MaskedDynamic(opts) {\n      var _this;\n\n      _classCallCheck(this, MaskedDynamic);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(MaskedDynamic).call(this, _objectSpread({}, MaskedDynamic.DEFAULTS, opts)));\n      _this.currentMask = null;\n      return _this;\n    }\n    /**\r\n      @override\r\n    */\n\n\n    _createClass(MaskedDynamic, [{\n      key: \"_update\",\n      value: function _update(opts) {\n        _get(_getPrototypeOf(MaskedDynamic.prototype), \"_update\", this).call(this, opts); // mask could be totally dynamic with only `dispatch` option\n\n\n        this.compiledMasks = Array.isArray(opts.mask) ? opts.mask.map(function (m) {\n          return createMask(m);\n        }) : [];\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"_appendCharRaw\",\n      value: function _appendCharRaw() {\n        var details = this._applyDispatch.apply(this, arguments);\n\n        if (this.currentMask) {\n          var _this$currentMask;\n\n          details.aggregate((_this$currentMask = this.currentMask)._appendChar.apply(_this$currentMask, arguments));\n        }\n\n        return details;\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"_storeBeforeTailState\",\n      value: function _storeBeforeTailState() {\n        _get(_getPrototypeOf(MaskedDynamic.prototype), \"_storeBeforeTailState\", this).call(this);\n\n        if (this.currentMask) this.currentMask._storeBeforeTailState();\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"_restoreBeforeTailState\",\n      value: function _restoreBeforeTailState() {\n        _get(_getPrototypeOf(MaskedDynamic.prototype), \"_restoreBeforeTailState\", this).call(this);\n\n        if (this.currentMask) this.currentMask._restoreBeforeTailState();\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"_resetBeforeTailState\",\n      value: function _resetBeforeTailState() {\n        _get(_getPrototypeOf(MaskedDynamic.prototype), \"_resetBeforeTailState\", this).call(this);\n\n        if (this.currentMask) this.currentMask._resetBeforeTailState();\n      }\n    }, {\n      key: \"_applyDispatch\",\n      value: function _applyDispatch() {\n        var appended = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var prevValueBeforeTail = flags.tail && this._beforeTailState ? this._beforeTailState._value : this.value;\n        var inputValue = this.rawInputValue;\n        var insertValue = flags.tail && this._beforeTailState ? // $FlowFixMe - tired to fight with type system\n        this._beforeTailState._rawInputValue : inputValue;\n        var tailValue = inputValue.slice(insertValue.length);\n        var prevMask = this.currentMask;\n        var details = new ChangeDetails(); // dispatch SHOULD NOT modify mask\n\n        this.currentMask = this.doDispatch(appended, flags); // restore state after dispatch\n\n        if (this.currentMask && this.currentMask !== prevMask) {\n          // if mask changed reapply input\n          this.currentMask.reset(); // $FlowFixMe - it's ok, we don't change current mask above\n\n          var d = this.currentMask.append(insertValue, {\n            raw: true\n          });\n          details.tailShift = d.inserted.length - prevValueBeforeTail.length;\n\n          this._storeBeforeTailState();\n\n          if (tailValue) {\n            // $FlowFixMe - it's ok, we don't change current mask above\n            details.tailShift += this.currentMask.append(tailValue, {\n              raw: true,\n              tail: true\n            }).tailShift;\n          }\n        }\n\n        return details;\n      }\n      /**\r\n      */\n\n    }, {\n      key: \"doDispatch\",\n      value: function doDispatch(appended) {\n        var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.dispatch(appended, this, flags);\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"doValidate\",\n      value: function doValidate() {\n        var _get2, _this$currentMask2;\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return (_get2 = _get(_getPrototypeOf(MaskedDynamic.prototype), \"doValidate\", this)).call.apply(_get2, [this].concat(args)) && (!this.currentMask || (_this$currentMask2 = this.currentMask).doValidate.apply(_this$currentMask2, args));\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        if (this.currentMask) this.currentMask.reset();\n        this.compiledMasks.forEach(function (m) {\n          return m.reset();\n        });\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"remove\",\n\n      /**\r\n        @override\r\n      */\n      value: function remove() {\n        var details = new ChangeDetails();\n\n        if (this.currentMask) {\n          var _this$currentMask3;\n\n          details.aggregate((_this$currentMask3 = this.currentMask).remove.apply(_this$currentMask3, arguments)) // update with dispatch\n          .aggregate(this._applyDispatch());\n        }\n\n        return details;\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"extractInput\",\n\n      /**\r\n        @override\r\n      */\n      value: function extractInput() {\n        var _this$currentMask4;\n\n        return this.currentMask ? (_this$currentMask4 = this.currentMask).extractInput.apply(_this$currentMask4, arguments) : '';\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"extractTail\",\n      value: function extractTail() {\n        var _this$currentMask5, _get3;\n\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        return this.currentMask ? (_this$currentMask5 = this.currentMask).extractTail.apply(_this$currentMask5, args) : (_get3 = _get(_getPrototypeOf(MaskedDynamic.prototype), \"extractTail\", this)).call.apply(_get3, [this].concat(args));\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"doCommit\",\n      value: function doCommit() {\n        if (this.currentMask) this.currentMask.doCommit();\n\n        _get(_getPrototypeOf(MaskedDynamic.prototype), \"doCommit\", this).call(this);\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"nearestInputPos\",\n      value: function nearestInputPos() {\n        var _this$currentMask6, _get4;\n\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        return this.currentMask ? (_this$currentMask6 = this.currentMask).nearestInputPos.apply(_this$currentMask6, args) : (_get4 = _get(_getPrototypeOf(MaskedDynamic.prototype), \"nearestInputPos\", this)).call.apply(_get4, [this].concat(args));\n      }\n    }, {\n      key: \"value\",\n      get: function get$$1() {\n        return this.currentMask ? this.currentMask.value : '';\n      },\n      set: function set$$1(value) {\n        _set(_getPrototypeOf(MaskedDynamic.prototype), \"value\", value, this, true);\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"unmaskedValue\",\n      get: function get$$1() {\n        return this.currentMask ? this.currentMask.unmaskedValue : '';\n      },\n      set: function set$$1(unmaskedValue) {\n        _set(_getPrototypeOf(MaskedDynamic.prototype), \"unmaskedValue\", unmaskedValue, this, true);\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"typedValue\",\n      get: function get$$1() {\n        return this.currentMask ? this.currentMask.typedValue : '';\n      } // probably typedValue should not be used with dynamic\n      ,\n      set: function set$$1(value) {\n        var unmaskedValue = String(value); // double check it\n\n        if (this.currentMask) {\n          this.currentMask.typedValue = value;\n          unmaskedValue = this.currentMask.unmaskedValue;\n        }\n\n        this.unmaskedValue = unmaskedValue;\n      }\n      /**\r\n        @override\r\n      */\n\n    }, {\n      key: \"isComplete\",\n      get: function get$$1() {\n        return !!this.currentMask && this.currentMask.isComplete;\n      }\n    }, {\n      key: \"state\",\n      get: function get$$1() {\n        return _objectSpread({}, _get(_getPrototypeOf(MaskedDynamic.prototype), \"state\", this), {\n          _rawInputValue: this.rawInputValue,\n          compiledMasks: this.compiledMasks.map(function (m) {\n            return m.state;\n          }),\n          currentMaskRef: this.currentMask,\n          currentMask: this.currentMask && this.currentMask.state\n        });\n      },\n      set: function set$$1(state) {\n        var compiledMasks = state.compiledMasks,\n            currentMaskRef = state.currentMaskRef,\n            currentMask = state.currentMask,\n            maskedState = _objectWithoutProperties(state, [\"compiledMasks\", \"currentMaskRef\", \"currentMask\"]);\n\n        this.compiledMasks.forEach(function (m, mi) {\n          return m.state = compiledMasks[mi];\n        });\n\n        if (currentMaskRef != null) {\n          this.currentMask = currentMaskRef;\n          this.currentMask.state = currentMask;\n        }\n\n        _set(_getPrototypeOf(MaskedDynamic.prototype), \"state\", maskedState, this, true);\n      }\n    }]);\n\n    return MaskedDynamic;\n  }(Masked);\n  MaskedDynamic.DEFAULTS = {\n    dispatch: function dispatch(appended, masked, flags) {\n      if (!masked.compiledMasks.length) return;\n      var inputValue = masked.rawInputValue; // simulate input\n\n      var inputs = masked.compiledMasks.map(function (m, index) {\n        var mState = m.state;\n        m.rawInputValue = inputValue;\n        m.append(appended, flags);\n        var weight = m.rawInputValue.length;\n        m.state = mState;\n        return {\n          weight: weight,\n          index: index\n        };\n      }); // pop masks with longer values first\n\n      inputs.sort(function (i1, i2) {\n        return i2.weight - i1.weight;\n      });\n      return masked.compiledMasks[inputs[0].index];\n    }\n  };\n\n  /**\r\n   * Applies mask on element.\r\n   * @constructor\r\n   * @param {HTMLInputElement|HTMLTextAreaElement|MaskElement} el - Element to apply mask\r\n   * @param {Object} opts - Custom mask options\r\n   * @return {InputMask}\r\n   */\n\n  function IMask(el) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // currently available only for input-like elements\n    return new InputMask(el, opts);\n  }\n  /** {@link InputMask} */\n\n  IMask.InputMask = InputMask;\n  /** {@link Masked} */\n\n  IMask.Masked = Masked;\n  /** {@link MaskedPattern} */\n\n  IMask.MaskedPattern = MaskedPattern;\n  /** {@link MaskedEnum} */\n\n  IMask.MaskedEnum = MaskedEnum;\n  /** {@link MaskedRange} */\n\n  IMask.MaskedRange = MaskedRange;\n  /** {@link MaskedNumber} */\n\n  IMask.MaskedNumber = MaskedNumber;\n  /** {@link MaskedDate} */\n\n  IMask.MaskedDate = MaskedDate;\n  /** {@link MaskedRegExp} */\n\n  IMask.MaskedRegExp = MaskedRegExp;\n  /** {@link MaskedFunction} */\n\n  IMask.MaskedFunction = MaskedFunction;\n  /** {@link MaskedDynamic} */\n\n  IMask.MaskedDynamic = MaskedDynamic;\n  /** {@link createMask} */\n\n  IMask.createMask = createMask;\n  /** {@link MaskElement} */\n\n  IMask.MaskElement = MaskElement;\n  /** {@link HTMLMaskElement} */\n\n  IMask.HTMLMaskElement = HTMLMaskElement;\n  g.IMask = IMask;\n\n  return IMask;\n\n})));\n//# sourceMappingURL=imask.js.map\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/imask/dist/imask.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ })

/******/ });